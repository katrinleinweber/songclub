/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Key swig_types[0] 
#define  SWIGTYPE_p_wchar_t swig_types[1] 
#define  SWIGTYPE_p_TagLib__ID3v2__Header swig_types[2] 
#define  SWIGTYPE_p_TagLib__Ogg__PageHeader swig_types[3] 
#define  SWIGTYPE_p_TagLib__File swig_types[4] 
#define  SWIGTYPE_p_TagLib__ID3v2__FrameFactory swig_types[5] 
#define  SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t swig_types[6] 
#define  SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__const_iterator swig_types[7] 
#define  SWIGTYPE_p_char swig_types[8] 
#define  SWIGTYPE_p_T swig_types[9] 
#define  SWIGTYPE_p_TagLib__AudioProperties swig_types[10] 
#define  SWIGTYPE_p_TagLib__MPEG__Properties swig_types[11] 
#define  SWIGTYPE_p_TagLib__Vorbis__Properties swig_types[12] 
#define  SWIGTYPE_p_TagLib__FLAC__Properties swig_types[13] 
#define  SWIGTYPE_p_TagLib__StringList swig_types[14] 
#define  SWIGTYPE_p_std__basic_stringTwchar_t_t swig_types[15] 
#define  SWIGTYPE_p_TagLib__ID3v2__Tag swig_types[16] 
#define  SWIGTYPE_p_TagLib__ByteVector swig_types[17] 
#define  SWIGTYPE_p_TagLib__Tag swig_types[18] 
#define  SWIGTYPE_p_TagLib__ID3v2__Frame swig_types[19] 
#define  SWIGTYPE_size_t swig_types[20] 
#define  SWIGTYPE_std__size_t swig_types[21] 
#define  SWIGTYPE_p_p_TagLib__ID3v2__Frame swig_types[22] 
#define  SWIGTYPE_p_TagLib__ID3v2__Footer swig_types[23] 
#define  SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t swig_types[24] 
#define  SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame swig_types[25] 
#define  SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame swig_types[26] 
#define  SWIGTYPE_p_TagLib__ID3v2__CommentsFrame swig_types[27] 
#define  SWIGTYPE_p_std__listTTagLib__String_t__const_iterator swig_types[28] 
#define  SWIGTYPE_p_std__listTTagLib__String_t__iterator swig_types[29] 
#define  SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__iterator swig_types[30] 
#define  SWIGTYPE_p_std__vectorTchar_t__const_iterator swig_types[31] 
#define  SWIGTYPE_p_std__vectorTchar_t__iterator swig_types[32] 
#define  SWIGTYPE_p_ConstIterator swig_types[33] 
#define  SWIGTYPE_p_Iterator swig_types[34] 
#define  SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator swig_types[35] 
#define  SWIGTYPE_p_std__string swig_types[36] 
#define  SWIGTYPE_p_unsigned_int swig_types[37] 
#define  SWIGTYPE_p_TagLib__ID3v1__StringHandler swig_types[38] 
#define  SWIGTYPE_p_TagLib__Ogg__XiphComment swig_types[39] 
#define  SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t swig_types[40] 
#define  SWIGTYPE_p_TagLib__RefCounter swig_types[41] 
#define  SWIGTYPE_p_unsigned_char swig_types[42] 
#define  SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator swig_types[43] 
#define  SWIGTYPE_p_TagLib__ID3v1__Tag swig_types[44] 
#define  SWIGTYPE_p_TagLib__ID3v2__ExtendedHeader swig_types[45] 
#define  SWIGTYPE_ptrdiff_t swig_types[46] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[47] 
#define  SWIGTYPE_p_TagLib__String swig_types[48] 
#define  SWIGTYPE_p_TagLib__FileRef swig_types[49] 
#define  SWIGTYPE_p_TagLib__Ogg__File swig_types[50] 
#define  SWIGTYPE_p_TagLib__MPEG__File swig_types[51] 
#define  SWIGTYPE_p_TagLib__Vorbis__File swig_types[52] 
#define  SWIGTYPE_p_TagLib__FLAC__File swig_types[53] 
#define  SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame swig_types[54] 
#define  SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__iterator swig_types[55] 
#define  SWIGTYPE_p_ByteVectorList swig_types[56] 
#define  SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator swig_types[57] 
#define  SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator swig_types[58] 
#define  SWIGTYPE_p_TagLib__APE__Tag swig_types[59] 
#define  SWIGTYPE_p_TagLib__ListTTagLib__String_t swig_types[60] 
#define  SWIGTYPE_p_unsigned_long swig_types[61] 
#define  SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator swig_types[62] 
static swig_type_info *swig_types[64];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _TagLib.so
  ------------------------------------------------*/
#define SWIG_init    init_TagLib

#define SWIG_name    "_TagLib"

#include "audioproperties.h"
#include "tag.h"
#include "fileref.h" 
using namespace TagLib;


#include <wchar.h>


#include <list>
#include <stdexcept>
#include <tlist.h>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif



#include <string>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>
#include <tmap.h>


  /*@/usr/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNSHORT int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNSHORT bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNSHORT unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
{ 
  char* cptr; size_t csize;  
  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
    /* in C you can do:        

         char x[5] = "hello"; 

        ie, assing the array using an extra '0' char.
    */
    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize);
	if (csize < size) memset(val + csize, 0, size - csize);
      }
      return 1;
    }
  }
  if (val) {
    PyErr_Format(PyExc_TypeError,
		 "a char array of maximum size %lu is expected", 
		 (unsigned long) size);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_char(PyObject *obj, char *val)
{
  const char* errmsg = val ? "char" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, CHAR_MIN,CHAR_MAX, errmsg)) {
      if (val) *val = (char)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
    return SWIG_AsCharArray(obj, val, 1);
  }
 }


SWIGINTERNSHORT char
SWIG_As_char(PyObject* obj)
{
  char v;
  if (!SWIG_AsVal_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(char));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}

  
SWIGINTERNSHORT int
SWIG_Check_char(PyObject* obj)
{
  return SWIG_AsVal_char(obj, (char*)0);
}


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


SWIGINTERNSHORT PyObject*
  SWIG_From_char(char c) 
{ 
  return PyString_FromStringAndSize(&c,1);
}


  /*@/usr/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


  /*@/usr/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject* 
  SWIG_From_long_SS_long(long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value)
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
  SWIG_AsVal_short(PyObject *obj, short *val)
{ 
  const char* errmsg = val ? "short" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, SHRT_MIN, SHRT_MAX, errmsg)) {
      if (val) *val = (short)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}


SWIGINTERNSHORT short
SWIG_As_short(PyObject* obj)
{
  short v;
  if (!SWIG_AsVal_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(short));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_short(PyObject* obj)
{
  return SWIG_AsVal_short(obj, (short*)0);
}


SWIGINTERN int
  SWIG_AsVal_long_SS_long(PyObject *obj, long long *val)
{
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long long", obj);
  }
  return 0;
}


SWIGINTERNSHORT long long
SWIG_As_long_SS_long(PyObject* obj)
{
  long long v;
  if (!SWIG_AsVal_long_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long_SS_long(PyObject* obj)
{
  return SWIG_AsVal_long_SS_long(obj, (long long*)0);
}

static PyObject *TagLib_ByteVector___repr__(TagLib::ByteVector *self){
            unsigned int len = self->size();
            const char* cstr = self->data();
            return PyString_FromStringAndSize(cstr, len);
        }

SWIGINTERN int
SWIG_AsWCharPtrAndSize(PyObject *obj, wchar_t **cptr, size_t *psize)
{
  static swig_type_info* pwchar_info = 0;
  wchar_t * vptr = 0;
  if (!pwchar_info) pwchar_info = SWIG_TypeQuery("wchar_t *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pwchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (wcslen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    int isunicode = PyUnicode_Check(obj);
    if (isunicode || PyString_Check(obj)) {
      if (cptr) {
	int size = isunicode ? PyUnicode_GetSize(obj) : PyString_Size(obj);
	wchar_t *nptr = ((wchar_t*) malloc((size + 1)*sizeof(wchar_t)));
	PyUnicodeObject *uni = (PyUnicodeObject *)PyUnicode_FromObject(obj);
	PyUnicode_AsWideChar(uni, nptr, size);
	nptr[size] = 0;
	*cptr = nptr;
	if (psize) {
	  *psize = (size_t) size + 1;
	}
	Py_DECREF(uni);
      }
      return SWIG_NEWOBJ;
    }
  }
  if (cptr) {
    SWIG_type_error("wchar_t *", obj);
  }
  return 0;
}


SWIGINTERN int
SWIG_AsWCharPtr(PyObject *obj, wchar_t **val)
{
  if (SWIG_AsWCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("wchar_t *", obj);
  }
  return 0;
}


SWIGINTERN int
SWIG_AsWCharArray(PyObject *obj, wchar_t *val, size_t size)
{ 
  wchar_t * cptr; size_t csize;  
  if (SWIG_AsWCharPtrAndSize(obj, &cptr, &csize)) {
    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(wchar_t));
	if (csize < size) memset(val+csize, 0, (size-csize)*sizeof(wchar_t));
      }
      return 1;
    }
  }
  if (val) {
    PyErr_Format(PyExc_ValueError, 
		 "a wchar_t array of maximum size %lu is expected", 
		 (unsigned long) size);
  }
  return 0;
}


#include <wchar.h>
SWIGINTERN int
  SWIG_AsVal_wchar_t(PyObject *obj, wchar_t *val)
{
  const char* errmsg = val ? "wchar_t" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, WCHAR_MIN, WCHAR_MAX, errmsg)) {
      if (val) *val = v;
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
    return SWIG_AsWCharArray(obj, val, 1);
  }
 }


SWIGINTERNSHORT wchar_t
SWIG_As_wchar_t(PyObject* obj)
{
  wchar_t v;
  if (!SWIG_AsVal_wchar_t(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(wchar_t));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_wchar_t(PyObject* obj)
{
  return SWIG_AsVal_wchar_t(obj, (wchar_t*)0);
}

static PyObject *TagLib_String___str__(TagLib::String *self){
            return PyString_FromStringAndSize(self->toCString(), self->size());
        }
static TagLib::String const &TagLib_List_Sl_TagLib_String_Sg____getitem__(TagLib::List<TagLib::String > *self,int i){
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
                return (*self)[i];
            else
                throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_String_Sg____setitem__(TagLib::List<TagLib::String > *self,int i,TagLib::String const &x){
            List<TagLib::String>::Iterator first = self->begin(); 
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
                (*self)[i] = x;
            else
                throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_String_Sg____delitem__(TagLib::List<TagLib::String > *self,int i){
            List<TagLib::String>::Iterator first = self->begin(); 
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
            {
                for (int k=0;k<i;k++)
                {
                    first++;
                }
                self->erase(first);
            }
            else throw std::out_of_range("list index out of range");
        }
static TagLib::List<TagLib::String > TagLib_List_Sl_TagLib_String_Sg____getslice__(TagLib::List<TagLib::String > *self,int i,int j){
            List<TagLib::String>::ConstIterator it = self->begin();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;
            if (i>=j) i=j;
            if (i>=0 && i<size && j>=0)
            {
                List<TagLib::String> tmp;
                for (int k = 0; k < j && k < size; k++) {
                    if (k >= i) tmp.append((*it));
                    it++;
                }
                return tmp;
            }
            else throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_String_Sg____delslice__(TagLib::List<TagLib::String > *self,int i,int j){
            List<TagLib::String>::Iterator first = self->begin();
            List<TagLib::String>::Iterator end = self->end();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;

            for (int k=0;k<i;k++)
            {
                first++;
            }
            for (int m=0;m<=j;m++)
            {
                end++;
            }
            //erase from first to end
            List<TagLib::String>::Iterator it = first;
            List<TagLib::String>::Iterator next = first;
            for (it = first; it != end; it = next) {
                next = it;       //it is valid
                next++;          //next is valid
                self->erase(it); //it is invalid
            }
        }
static void TagLib_List_Sl_TagLib_String_Sg____setslice__(TagLib::List<TagLib::String > *self,int i,int j,TagLib::List<TagLib::String > const &v){
            List<TagLib::String>::Iterator first = self->begin();
            List<TagLib::String>::Iterator end = self->end();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;

            for (int k=0;k<i;k++)
            {
                first++;
            }
            for (int m=0;m<=j;m++)
            {
                end++;
            }
            if (int(v.size()) == j-i) 
            {
                std::copy(v.begin(),v.end(),first);
            }
            else {
                //erase from first to end
                List<TagLib::String>::Iterator it = first;
                List<TagLib::String>::Iterator next = first;
                List<TagLib::String>::ConstIterator vit;
                for (it = first; it != end; it = next) {
                    next = it;       //it is valid
                    next++;          //next is valid
                    self->erase(it); //it is invalid
                }
                if (i+1 <= int(self->size())) 
                {
                    first = self->begin();
                    for (int k=0;k<i;k++)
                    {
                        first++;
                    }
                    for (vit = v.begin(); vit != v.end(); vit++) {
                        self->insert(first, *vit);
                    }
                    //self->insert(first,v.begin(),v.end());
                }
                else {
                    for (vit = v.begin(); vit != v.end(); vit++) {
                        self->insert(self->end(), *vit);
                    }
                    //self->insert(self->end(),v.begin(),v.end());
                }
            }

        }
static unsigned int TagLib_List_Sl_TagLib_String_Sg____len__(TagLib::List<TagLib::String > *self){
            return self->size();
        }
static bool TagLib_List_Sl_TagLib_String_Sg____nonzero__(TagLib::List<TagLib::String > *self){
            return !(self->isEmpty());
        }

#include "mpegfile.h"


SWIGINTERNSHORT long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}


using namespace ID3v2;


#include "id3v2frame.h"

static PyObject *TagLib_ID3v2_Frame___str__(TagLib::ID3v2::Frame *self){
            return PyString_FromString(self->toString().toCString());
        }
static PyObject *TagLib_ID3v2_Frame___repr__(TagLib::ID3v2::Frame *self){
            return PyString_FromString(self->toString().toCString());
        }

#include "id3v2tag.h"

static TagLib::ID3v2::Frame *const &TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____getitem__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i){
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
                return (*self)[i];
            else
                throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____setitem__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i,TagLib::ID3v2::Frame *const &x){
            List<TagLib::ID3v2::Frame *>::Iterator first = self->begin(); 
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
                (*self)[i] = x;
            else
                throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____delitem__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i){
            List<TagLib::ID3v2::Frame *>::Iterator first = self->begin(); 
            int size = int(self->size());
            if (i<0) i += size;
            if (i>=0 && i<size)
            {
                for (int k=0;k<i;k++)
                {
                    first++;
                }
                self->erase(first);
            }
            else throw std::out_of_range("list index out of range");
        }
static TagLib::List<TagLib::ID3v2::Frame * > TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____getslice__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i,int j){
            List<TagLib::ID3v2::Frame *>::ConstIterator it = self->begin();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;
            if (i>=j) i=j;
            if (i>=0 && i<size && j>=0)
            {
                List<TagLib::ID3v2::Frame *> tmp;
                for (int k = 0; k < j && k < size; k++) {
                    if (k >= i) tmp.append((*it));
                    it++;
                }
                return tmp;
            }
            else throw std::out_of_range("list index out of range");
        }
static void TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____delslice__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i,int j){
            List<TagLib::ID3v2::Frame *>::Iterator first = self->begin();
            List<TagLib::ID3v2::Frame *>::Iterator end = self->end();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;

            for (int k=0;k<i;k++)
            {
                first++;
            }
            for (int m=0;m<=j;m++)
            {
                end++;
            }
            //erase from first to end
            List<TagLib::ID3v2::Frame *>::Iterator it = first;
            List<TagLib::ID3v2::Frame *>::Iterator next = first;
            for (it = first; it != end; it = next) {
                next = it;       //it is valid
                next++;          //next is valid
                self->erase(it); //it is invalid
            }
        }
static void TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____setslice__(TagLib::List<TagLib::ID3v2::Frame * > *self,int i,int j,TagLib::List<TagLib::ID3v2::Frame * > const &v){
            List<TagLib::ID3v2::Frame *>::Iterator first = self->begin();
            List<TagLib::ID3v2::Frame *>::Iterator end = self->end();

            int size = int(self->size());
            if (i<0) i += size;
            if (j<0) j += size;
            if (i<0) i = 0;
            if (j>size) j = size;

            for (int k=0;k<i;k++)
            {
                first++;
            }
            for (int m=0;m<=j;m++)
            {
                end++;
            }
            if (int(v.size()) == j-i) 
            {
                std::copy(v.begin(),v.end(),first);
            }
            else {
                //erase from first to end
                List<TagLib::ID3v2::Frame *>::Iterator it = first;
                List<TagLib::ID3v2::Frame *>::Iterator next = first;
                List<TagLib::ID3v2::Frame *>::ConstIterator vit;
                for (it = first; it != end; it = next) {
                    next = it;       //it is valid
                    next++;          //next is valid
                    self->erase(it); //it is invalid
                }
                if (i+1 <= int(self->size())) 
                {
                    first = self->begin();
                    for (int k=0;k<i;k++)
                    {
                        first++;
                    }
                    for (vit = v.begin(); vit != v.end(); vit++) {
                        self->insert(first, *vit);
                    }
                    //self->insert(first,v.begin(),v.end());
                }
                else {
                    for (vit = v.begin(); vit != v.end(); vit++) {
                        self->insert(self->end(), *vit);
                    }
                    //self->insert(self->end(),v.begin(),v.end());
                }
            }

        }
static unsigned int TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____len__(TagLib::List<TagLib::ID3v2::Frame * > *self){
            return self->size();
        }
static bool TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____nonzero__(TagLib::List<TagLib::ID3v2::Frame * > *self){
            return !(self->isEmpty());
        }
static bool TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____nonzero__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
            return !(self->isEmpty());
        }
static TagLib::ID3v2::FrameList &TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____getitem__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector const &key){
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i = self->find(key);
            if (i != self->end()) 
                return i->second;
            else
                throw std::out_of_range("key not found");
        }
static void TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____setitem__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector const &key,TagLib::ID3v2::FrameList const &x){
            (*self)[key] = x;
        }
static void TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____delitem__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector const &key){
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i = self->find(key);
            if (i != self->end())
                self->erase(i);
            else
                throw std::out_of_range("key not found");
        }
static bool TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__has_key(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector const &key){
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i = self->find(key);
            return i != self->end();
        }
static PyObject *TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__keys(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
            PyObject* keyList = PyList_New(self->size());
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::ByteVector* ptr = new TagLib::ByteVector(i->first);
                PyList_SetItem(keyList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__ByteVector,1));
            }
            return keyList;
        }
static PyObject *TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__values(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
            PyObject* valueList = PyList_New(self->size());
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::ID3v2::FrameList* ptr = new TagLib::ID3v2::FrameList(i->second);
                PyList_SetItem(valueList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t,1));
            }
            return valueList;
        }
static PyObject *TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__items(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
            PyObject* itemList = PyList_New(self->size());
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::ByteVector* k_ptr = new TagLib::ByteVector(i->first);
                TagLib::ID3v2::FrameList* t_ptr = new TagLib::ID3v2::FrameList(i->second);
                PyObject* item = PyTuple_New(2);
                PyTuple_SetItem(item,0,
                        SWIG_NewPointerObj((void *) k_ptr,
                            SWIGTYPE_p_TagLib__ByteVector,1));
                PyTuple_SetItem(item,1,
                        SWIG_NewPointerObj((void *) t_ptr,
                            SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t,1));
                PyList_SetItem(itemList,j,item);
            }
            return itemList;
        }
static bool TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____contains__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector const &key){
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i = self->find(key);
            return i != self->end();
        }
static PyObject *TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____iter__(TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
            #if PY_VERSION_HEX >= 0x02020000
                PyObject* keyList = PyList_New(self->size());
            TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::ByteVector* ptr = new TagLib::ByteVector(i->first);
                PyList_SetItem(keyList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__ByteVector,1));
            }
            PyObject* iter = PyObject_GetIter(keyList);
            Py_DECREF(keyList);
            return iter;
            #else
                throw std::runtime_error("Python 2.2 or later is needed"
                        " for Iterator support");
            #endif
        }

#include "textidentificationframe.h"

static TagLib::ID3v2::TextIdentificationFrame *TextIdentificationFrame_fromFrame(TagLib::ID3v2::Frame *frame){
                return dynamic_cast<TextIdentificationFrame*> (frame);
            }

#include "commentsframe.h"

static TagLib::ID3v2::CommentsFrame *CommentsFrame_fromFrame(TagLib::ID3v2::Frame *frame){
                return dynamic_cast<CommentsFrame*> (frame);
            }

#include "attachedpictureframe.h"

static TagLib::ID3v2::AttachedPictureFrame *AttachedPictureFrame_fromFrame(TagLib::ID3v2::Frame *frame){
                return dynamic_cast<AttachedPictureFrame*> (frame);
            }

#include "id3v1tag.h"


#include "oggfile.h"


#include "vorbisfile.h"

static bool TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____nonzero__(TagLib::Map<TagLib::String,TagLib::StringList > *self){
            return !(self->isEmpty());
        }
static TagLib::StringList &TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____getitem__(TagLib::Map<TagLib::String,TagLib::StringList > *self,TagLib::String const &key){
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i = self->find(key);
            if (i != self->end()) 
                return i->second;
            else
                throw std::out_of_range("key not found");
        }
static void TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____setitem__(TagLib::Map<TagLib::String,TagLib::StringList > *self,TagLib::String const &key,TagLib::StringList const &x){
            (*self)[key] = x;
        }
static void TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____delitem__(TagLib::Map<TagLib::String,TagLib::StringList > *self,TagLib::String const &key){
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i = self->find(key);
            if (i != self->end())
                self->erase(i);
            else
                throw std::out_of_range("key not found");
        }
static bool TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__has_key(TagLib::Map<TagLib::String,TagLib::StringList > *self,TagLib::String const &key){
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i = self->find(key);
            return i != self->end();
        }
static PyObject *TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__keys(TagLib::Map<TagLib::String,TagLib::StringList > *self){
            PyObject* keyList = PyList_New(self->size());
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::String* ptr = new TagLib::String(i->first);
                PyList_SetItem(keyList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__String,1));
            }
            return keyList;
        }
static PyObject *TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__values(TagLib::Map<TagLib::String,TagLib::StringList > *self){
            PyObject* valueList = PyList_New(self->size());
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::StringList* ptr = new TagLib::StringList(i->second);
                PyList_SetItem(valueList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__StringList,1));
            }
            return valueList;
        }
static PyObject *TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__items(TagLib::Map<TagLib::String,TagLib::StringList > *self){
            PyObject* itemList = PyList_New(self->size());
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::String* k_ptr = new TagLib::String(i->first);
                TagLib::StringList* t_ptr = new TagLib::StringList(i->second);
                PyObject* item = PyTuple_New(2);
                PyTuple_SetItem(item,0,
                        SWIG_NewPointerObj((void *) k_ptr,
                            SWIGTYPE_p_TagLib__String,1));
                PyTuple_SetItem(item,1,
                        SWIG_NewPointerObj((void *) t_ptr,
                            SWIGTYPE_p_TagLib__StringList,1));
                PyList_SetItem(itemList,j,item);
            }
            return itemList;
        }
static bool TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____contains__(TagLib::Map<TagLib::String,TagLib::StringList > *self,TagLib::String const &key){
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i = self->find(key);
            return i != self->end();
        }
static PyObject *TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____iter__(TagLib::Map<TagLib::String,TagLib::StringList > *self){
            #if PY_VERSION_HEX >= 0x02020000
                PyObject* keyList = PyList_New(self->size());
            TagLib::Map<TagLib::String,TagLib::StringList >::Iterator i;
            unsigned int j;
            for (i=self->begin(), j=0; i!=self->end(); ++i, ++j) {
                TagLib::String* ptr = new TagLib::String(i->first);
                PyList_SetItem(keyList,j,
                        SWIG_NewPointerObj((void *) ptr,
                            SWIGTYPE_p_TagLib__String,1));
            }
            PyObject* iter = PyObject_GetIter(keyList);
            Py_DECREF(keyList);
            return iter;
            #else
                throw std::runtime_error("Python 2.2 or later is needed"
                        " for Iterator support");
            #endif
        }

#include "flacfile.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_RefCounter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::RefCounter *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RefCounter")) goto fail;
    result = (TagLib::RefCounter *)new TagLib::RefCounter();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__RefCounter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RefCounter_ref(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::RefCounter *arg1 = (TagLib::RefCounter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RefCounter_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__RefCounter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->ref();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RefCounter_deref(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::RefCounter *arg1 = (TagLib::RefCounter *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RefCounter_deref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__RefCounter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->deref();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RefCounter_count(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::RefCounter *arg1 = (TagLib::RefCounter *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RefCounter_count",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__RefCounter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->count();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RefCounter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::RefCounter *arg1 = (TagLib::RefCounter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RefCounter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__RefCounter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RefCounter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__RefCounter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_AudioProperties(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AudioProperties",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__AudioProperties, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AudioProperties_length(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AudioProperties_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__AudioProperties, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((TagLib::AudioProperties const *)arg1)->length();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AudioProperties_bitrate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AudioProperties_bitrate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__AudioProperties, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((TagLib::AudioProperties const *)arg1)->bitrate();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AudioProperties_sampleRate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AudioProperties_sampleRate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__AudioProperties, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((TagLib::AudioProperties const *)arg1)->sampleRate();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AudioProperties_channels(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AudioProperties_channels",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__AudioProperties, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((TagLib::AudioProperties const *)arg1)->channels();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AudioProperties_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__AudioProperties, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileRef__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FileRef")) goto fail;
    result = (TagLib::FileRef *)new TagLib::FileRef();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::AudioProperties::ReadStyle arg3 ;
    TagLib::FileRef *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FileRef",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::AudioProperties::ReadStyle)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::FileRef *)new TagLib::FileRef((char const *)arg1,arg2,(TagLib::AudioProperties::ReadStyle )arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::FileRef *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FileRef",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::FileRef *)new TagLib::FileRef((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::FileRef *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileRef",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::FileRef *)new TagLib::FileRef((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::File *arg1 = (TagLib::File *) 0 ;
    TagLib::FileRef *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileRef",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = 0 ;
    TagLib::FileRef *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileRef",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::FileRef");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::FileRef *)new TagLib::FileRef((TagLib::FileRef const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FileRef, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileRef(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FileRef__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FileRef__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FileRef, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileRef__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FileRef__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_FileRef__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_FileRef__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileRef'");
    return NULL;
}


static PyObject *_wrap_delete_FileRef(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileRef",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    TagLib::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Tag *)((TagLib::FileRef const *)arg1)->tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_audioProperties(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    TagLib::AudioProperties *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_audioProperties",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::AudioProperties *)((TagLib::FileRef const *)arg1)->audioProperties();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__AudioProperties, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_file(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    TagLib::File *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_file",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::File *)((TagLib::FileRef const *)arg1)->file();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_save",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->save();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_isNull(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_isNull",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::FileRef const *)arg1)->isNull();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    TagLib::FileRef *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileRef___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::FileRef");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((TagLib::FileRef const *)arg1)->operator ==((TagLib::FileRef const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
    TagLib::FileRef *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileRef___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__FileRef, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::FileRef");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((TagLib::FileRef const *)arg1)->operator !=((TagLib::FileRef const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_create__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::AudioProperties::ReadStyle arg3 ;
    TagLib::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FileRef_create",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::AudioProperties::ReadStyle)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1,arg2,(TagLib::AudioProperties::ReadStyle )arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_create__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileRef_create",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_create__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::File *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileRef_create",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileRef_create(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_FileRef_create__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_FileRef_create__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_FileRef_create__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FileRef_create'");
    return NULL;
}


static PyObject * FileRef_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__FileRef, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ByteVector__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ByteVector")) goto fail;
    result = (TagLib::ByteVector *)new TagLib::ByteVector();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint arg1 ;
    char arg2 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ByteVector",&obj0,&obj1)) goto fail;
    {
        arg1 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint arg1 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteVector",&obj0)) goto fail;
    {
        arg1 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteVector",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteVector",&obj0)) goto fail;
    {
        arg1 = (char)(SWIG_As_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ByteVector",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteVector",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ByteVector__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ByteVector__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_ByteVector__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_char(argv[0]);
        if (_v) {
            return _wrap_new_ByteVector__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_ByteVector__SWIG_6(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_char(argv[1]);
            if (_v) {
                return _wrap_new_ByteVector__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_ByteVector__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ByteVector'");
    return NULL;
}


static PyObject *_wrap_delete_ByteVector(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ByteVector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_setData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *arg2 = (char *) 0 ;
    TagLib::uint arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_setData",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setData((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_setData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_setData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->setData((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_setData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_ByteVector_setData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_setData__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_setData'");
    return NULL;
}


static PyObject *_wrap_ByteVector_data__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->data();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_data__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((TagLib::ByteVector const *)arg1)->data();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_data(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_data__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_data__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_data'");
    return NULL;
}


static PyObject *_wrap_ByteVector_mid__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint arg2 ;
    TagLib::uint arg3 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_mid",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((TagLib::ByteVector const *)arg1)->mid(arg2,arg3);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_mid__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_mid",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((TagLib::ByteVector const *)arg1)->mid(arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_mid(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_ByteVector_mid__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_mid__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_mid'");
    return NULL;
}


static PyObject *_wrap_ByteVector_at(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint arg2 ;
    char result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_at",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char)((TagLib::ByteVector const *)arg1)->at(arg2);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    int arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ByteVector_find",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_find",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_find__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ByteVector_find__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_find__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_ByteVector_find__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_find'");
    return NULL;
}


static PyObject *_wrap_ByteVector_rfind__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    int arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ByteVector_rfind",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_rfind__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_rfind",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_rfind__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_rfind",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_rfind(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ByteVector_rfind__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_rfind__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_ByteVector_rfind__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_rfind'");
    return NULL;
}


static PyObject *_wrap_ByteVector_containsAt__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    TagLib::uint arg4 ;
    TagLib::uint arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:ByteVector_containsAt",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_containsAt__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    TagLib::uint arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ByteVector_containsAt",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_containsAt__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::uint arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_containsAt",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_containsAt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_containsAt__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_ByteVector_containsAt__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_unsigned_SS_int(argv[4]);
                        if (_v) {
                            return _wrap_ByteVector_containsAt__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_containsAt'");
    return NULL;
}


static PyObject *_wrap_ByteVector_startsWith(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_startsWith",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->startsWith((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_endsWith(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_endsWith",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->endsWith((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_endsWithPartialMatch(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_endsWithPartialMatch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (int)((TagLib::ByteVector const *)arg1)->endsWithPartialMatch((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->append((TagLib::ByteVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint arg2 ;
    char arg3 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteVector_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (char)(SWIG_As_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        TagLib::ByteVector &_result_ref = (arg1)->resize(arg2,arg3);
        result = (TagLib::ByteVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::ByteVector &_result_ref = (arg1)->resize(arg2);
        result = (TagLib::ByteVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ByteVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_ByteVector_resize__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_char(argv[2]);
                if (_v) {
                    return _wrap_ByteVector_resize__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_resize'");
    return NULL;
}


static PyObject *_wrap_ByteVector_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::ByteVector::Iterator * resultptr;
        resultptr = new TagLib::ByteVector::Iterator((TagLib::ByteVector::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTchar_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ByteVector const *)arg1)->begin();
    
    {
        TagLib::ByteVector::ConstIterator * resultptr;
        resultptr = new TagLib::ByteVector::ConstIterator((TagLib::ByteVector::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTchar_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_begin'");
    return NULL;
}


static PyObject *_wrap_ByteVector_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::ByteVector::Iterator * resultptr;
        resultptr = new TagLib::ByteVector::Iterator((TagLib::ByteVector::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTchar_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ByteVector const *)arg1)->end();
    
    {
        TagLib::ByteVector::ConstIterator * resultptr;
        resultptr = new TagLib::ByteVector::ConstIterator((TagLib::ByteVector::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTchar_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_end'");
    return NULL;
}


static PyObject *_wrap_ByteVector_isNull(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_isNull",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::ByteVector const *)arg1)->isNull();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::ByteVector const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_checksum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_checksum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->checksum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toUInt__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    bool arg2 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_toUInt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->toUInt(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toUInt__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_toUInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->toUInt();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toUInt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_toUInt__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_toUInt__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_toUInt'");
    return NULL;
}


static PyObject *_wrap_ByteVector_toShort__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    bool arg2 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_toShort",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (short)((TagLib::ByteVector const *)arg1)->toShort(arg2);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toShort__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_toShort",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((TagLib::ByteVector const *)arg1)->toShort();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toShort(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_toShort__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_toShort__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_toShort'");
    return NULL;
}


static PyObject *_wrap_ByteVector_toLongLong__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    bool arg2 ;
    long long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_toLongLong",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (long long)((TagLib::ByteVector const *)arg1)->toLongLong(arg2);
    
    {
        resultobj = SWIG_From_long_SS_long((long long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toLongLong__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    long long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_toLongLong",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long long)((TagLib::ByteVector const *)arg1)->toLongLong();
    
    {
        resultobj = SWIG_From_long_SS_long((long long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_toLongLong(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ByteVector_toLongLong__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_toLongLong__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_toLongLong'");
    return NULL;
}


static PyObject *_wrap_ByteVector_fromUInt__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint arg1 ;
    bool arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_fromUInt",&obj0,&obj1)) goto fail;
    {
        arg1 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromUInt(arg1,arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromUInt__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint arg1 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_fromUInt",&obj0)) goto fail;
    {
        arg1 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromUInt(arg1);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromUInt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_ByteVector_fromUInt__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_fromUInt__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_fromUInt'");
    return NULL;
}


static PyObject *_wrap_ByteVector_fromShort__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    short arg1 ;
    bool arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_fromShort",&obj0,&obj1)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromShort(arg1,arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromShort__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    short arg1 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_fromShort",&obj0)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromShort(arg1);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromShort(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            return _wrap_ByteVector_fromShort__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_fromShort__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_fromShort'");
    return NULL;
}


static PyObject *_wrap_ByteVector_fromLongLong__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    long long arg1 ;
    bool arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_fromLongLong",&obj0,&obj1)) goto fail;
    {
        arg1 = (long long)(SWIG_As_long_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromLongLong(arg1,arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromLongLong__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    long long arg1 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_fromLongLong",&obj0)) goto fail;
    {
        arg1 = (long long)(SWIG_As_long_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromLongLong(arg1);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromLongLong(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_long_SS_long(argv[0]);
        if (_v) {
            return _wrap_ByteVector_fromLongLong__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_long_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ByteVector_fromLongLong__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_fromLongLong'");
    return NULL;
}


static PyObject *_wrap_ByteVector_fromCString__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector_fromCString",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = TagLib::ByteVector::fromCString((char const *)arg1,arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromCString__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector_fromCString",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = TagLib::ByteVector::fromCString((char const *)arg1);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector_fromCString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_ByteVector_fromCString__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_ByteVector_fromCString__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteVector_fromCString'");
    return NULL;
}


static PyObject *_wrap_ByteVector___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator ==((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator !=((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator ==((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ByteVector___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_ByteVector___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_ByteVector___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator !=((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteVector___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ByteVector___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_ByteVector___ne____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_ByteVector___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator <((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::ByteVector const *)arg1)->operator >((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ByteVector___add__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteVector___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::ByteVector const *)arg1)->operator +((TagLib::ByteVector const &)*arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static int _wrap_ByteVector_null_set(PyObject *_val) {
    {
        TagLib::ByteVector * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'TagLib::ByteVector::null'");
            return 1;
        }
        TagLib::ByteVector::null = *((TagLib::ByteVector *) temp);
    }
    return 0;
}


static PyObject *_wrap_ByteVector_null_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&TagLib::ByteVector::null), SWIGTYPE_p_TagLib__ByteVector, 0);
    return pyobj;
}


static PyObject *_wrap_ByteVector___repr__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteVector___repr__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ByteVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_ByteVector___repr__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ByteVector_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ByteVector, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_String__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_String")) goto fail;
    result = (TagLib::String *)new TagLib::String();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = 0 ;
    TagLib::String *result;
    TagLib::String temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = String(PyString_AsString(obj0));
            arg1 = &temp1;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::String *)new TagLib::String((TagLib::String const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((std::string const &)*arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::wstring *arg1 = 0 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_stringTwchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::wstring");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((std::basic_string<TagLib::wchar > const &)*arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::wstring *arg1 = 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_stringTwchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::wstring");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((std::basic_string<TagLib::wchar > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wchar_t *arg1 = (wchar_t *) 0 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    if (!SWIG_AsWCharPtr(obj0, (wchar_t**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((wchar_t const *)arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wchar_t *arg1 = (wchar_t *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    if (!SWIG_AsWCharPtr(obj0, (wchar_t**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((wchar_t const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    {
        arg1 = (char)(SWIG_As_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String(arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        arg1 = (char)(SWIG_As_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wchar_t arg1 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    {
        arg1 = (wchar_t)(SWIG_As_wchar_t(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String(arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj;
    wchar_t arg1 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        arg1 = (wchar_t)(SWIG_As_wchar_t(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((char const *)arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::String::Type arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_String",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::String *)new TagLib::String((TagLib::ByteVector const &)*arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_String__SWIG_15(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::String *)new TagLib::String((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_String(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_String__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_String__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_stringTwchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_String__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_String__SWIG_15(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_wchar_t(argv[0]);
        if (_v) {
            return _wrap_new_String__SWIG_11(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_char(argv[0]);
        if (_v) {
            return _wrap_new_String__SWIG_9(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsWCharPtr(argv[0], (wchar_t **)(0));
        if (_v) {
            return _wrap_new_String__SWIG_7(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_String__SWIG_13(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_String__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_stringTwchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_14(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_wchar_t(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_char(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsWCharPtr(argv[0], (wchar_t **)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_String__SWIG_6(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_String'");
    return NULL;
}


static PyObject *_wrap_delete_String(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_String",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_to8Bit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    bool arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_to8Bit",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((TagLib::String const *)arg1)->to8Bit(arg2);
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_to8Bit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_to8Bit",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::String const *)arg1)->to8Bit();
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_to8Bit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_to8Bit__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_String_to8Bit__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_to8Bit'");
    return NULL;
}


static PyObject *_wrap_String_toCString__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    bool arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_toCString",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char *)((TagLib::String const *)arg1)->toCString(arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_toCString__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_toCString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((TagLib::String const *)arg1)->toCString();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_toCString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_toCString__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_String_toCString__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_toCString'");
    return NULL;
}


static PyObject *_wrap_String_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::String::Iterator * resultptr;
        resultptr = new TagLib::String::Iterator((TagLib::String::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::String const *)arg1)->begin();
    
    {
        TagLib::String::ConstIterator * resultptr;
        resultptr = new TagLib::String::ConstIterator((TagLib::String::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_begin'");
    return NULL;
}


static PyObject *_wrap_String_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::String::Iterator * resultptr;
        resultptr = new TagLib::String::Iterator((TagLib::String::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::String const *)arg1)->end();
    
    {
        TagLib::String::ConstIterator * resultptr;
        resultptr = new TagLib::String::ConstIterator((TagLib::String::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_stringTTagLib__wchar_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_String_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_end'");
    return NULL;
}


static PyObject *_wrap_String_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    int arg3 ;
    int result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:String_find",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (int)((TagLib::String const *)arg1)->find((TagLib::String const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    int result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (int)((TagLib::String const *)arg1)->find((TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_String_find__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_String_find__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_find'");
    return NULL;
}


static PyObject *_wrap_String_substr__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::uint arg2 ;
    TagLib::uint arg3 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:String_substr",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((TagLib::String const *)arg1)->substr(arg2,arg3);
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_substr__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::uint arg2 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_substr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((TagLib::String const *)arg1)->substr(arg2);
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_substr(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_String_substr__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_String_substr__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String_substr'");
    return NULL;
}


static PyObject *_wrap_String_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String *result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        TagLib::String &_result_ref = (arg1)->append((TagLib::String const &)*arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_upper(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_upper",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::String const *)arg1)->upper();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::String const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::String const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_isNull(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_isNull",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::String const *)arg1)->isNull();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String::Type arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String_data",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((TagLib::String const *)arg1)->data((TagLib::String::Type )arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_toInt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_toInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((TagLib::String const *)arg1)->toInt();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_stripWhiteSpace(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_stripWhiteSpace",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::String const *)arg1)->stripWhiteSpace();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String_number(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String_number",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = TagLib::String::number(arg1);
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::String const *)arg1)->operator ==((TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String *result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        TagLib::String &_result_ref = (arg1)->operator +=((TagLib::String const &)*arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsWCharPtr(obj1, (wchar_t**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        TagLib::String &_result_ref = (arg1)->operator +=((wchar_t const *)arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    char *arg2 = (char *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        TagLib::String &_result_ref = (arg1)->operator +=((char const *)arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    wchar_t arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (wchar_t)(SWIG_As_wchar_t(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::String &_result_ref = (arg1)->operator +=(arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    char arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::String &_result_ref = (arg1)->operator +=(arg2);
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_String___iadd__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_wchar_t(argv[1]);
            if (_v) {
                return _wrap_String___iadd____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_char(argv[1]);
            if (_v) {
                return _wrap_String___iadd____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_String___iadd____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_String___iadd____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__String, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsWCharPtr(argv[1], (wchar_t **)(0));
            if (_v) {
                return _wrap_String___iadd____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'String___iadd__'");
    return NULL;
}


static PyObject *_wrap_String___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:String___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::String const *)arg1)->operator <((TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_String_null_set(PyObject *_val) {
    {
        TagLib::String * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'TagLib::String::null'");
            return 1;
        }
        TagLib::String::null = *((TagLib::String *) temp);
    }
    return 0;
}


static PyObject *_wrap_String_null_get(void) {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)(&TagLib::String::null), SWIGTYPE_p_TagLib__String, 0);
    return pyobj;
}


static PyObject *_wrap_String___str__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = (TagLib::String *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:String___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__String, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_String___str__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * String_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__String, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_title(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_title",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Tag const *)arg1)->title();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_artist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_artist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Tag const *)arg1)->artist();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_album(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_album",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Tag const *)arg1)->album();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_comment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_comment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Tag const *)arg1)->comment();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_genre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_genre",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Tag const *)arg1)->genre();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_year(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Tag const *)arg1)->year();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_track(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_track",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Tag const *)arg1)->track();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setTitle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setTitle((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setArtist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setArtist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setArtist((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setAlbum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setAlbum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setAlbum((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setComment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setComment((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setGenre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setGenre",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setGenre((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setYear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setYear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_setTrack(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_setTrack",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTrack(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tag_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::Tag const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_duplicate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Tag_duplicate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_duplicate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
    TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tag_duplicate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tag_duplicate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__Tag, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Tag_duplicate__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__Tag, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_Tag_duplicate__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Tag_duplicate'");
    return NULL;
}


static PyObject * Tag_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__Tag, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pystringlist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pystringlist")) goto fail;
    result = (TagLib::List<TagLib::String > *)new TagLib::List<TagLib::String >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__String_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pystringlist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = 0 ;
    TagLib::List<TagLib::String > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pystringlist",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::List<TagLib::String > *)new TagLib::List<TagLib::String >((TagLib::List<TagLib::String > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__String_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pystringlist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pystringlist__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_pystringlist__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pystringlist'");
    return NULL;
}


static PyObject *_wrap_delete_pystringlist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pystringlist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::List<TagLib::String >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::Iterator((TagLib::List<TagLib::String >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::List<TagLib::String > const *)arg1)->begin();
    
    {
        TagLib::List<TagLib::String >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::ConstIterator((TagLib::List<TagLib::String >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_begin'");
    return NULL;
}


static PyObject *_wrap_pystringlist_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::List<TagLib::String >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::Iterator((TagLib::List<TagLib::String >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::List<TagLib::String > const *)arg1)->end();
    
    {
        TagLib::List<TagLib::String >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::ConstIterator((TagLib::List<TagLib::String >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_end'");
    return NULL;
}


static PyObject *_wrap_pystringlist_insert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::Iterator arg2 ;
    TagLib::String *arg3 = 0 ;
    TagLib::String temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pystringlist_insert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::List<TagLib::String >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__listTTagLib__String_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = String(PyString_AsString(obj2));
            arg3 = &temp3;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->insert(arg2,(TagLib::String const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_sortedInsert__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool arg3 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pystringlist_sortedInsert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->sortedInsert((TagLib::String const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_sortedInsert__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_sortedInsert",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->sortedInsert((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_sortedInsert(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pystringlist_sortedInsert__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_pystringlist_sortedInsert__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_sortedInsert'");
    return NULL;
}


static PyObject *_wrap_pystringlist_append__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::List<TagLib::String > *result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        TagLib::List<TagLib::String > &_result_ref = (arg1)->append((TagLib::String const &)*arg2);
        result = (TagLib::List<TagLib::String > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_append__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String > *arg2 = 0 ;
    TagLib::List<TagLib::String > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::List<TagLib::String > &_result_ref = (arg1)->append((TagLib::List<TagLib::String > const &)*arg2);
        result = (TagLib::List<TagLib::String > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_append(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pystringlist_append__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pystringlist_append__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_append'");
    return NULL;
}


static PyObject *_wrap_pystringlist_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::List<TagLib::String > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::List<TagLib::String > const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::List<TagLib::String >::Iterator result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (arg1)->find((TagLib::String const &)*arg2);
    
    {
        TagLib::List<TagLib::String >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::Iterator((TagLib::List<TagLib::String >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::List<TagLib::String >::ConstIterator result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::List<TagLib::String > const *)arg1)->find((TagLib::String const &)*arg2);
    
    {
        TagLib::List<TagLib::String >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::String >::ConstIterator((TagLib::List<TagLib::String >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__String_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pystringlist_find__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pystringlist_find__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_find'");
    return NULL;
}


static PyObject *_wrap_pystringlist_contains(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::List<TagLib::String > const *)arg1)->contains((TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String >::Iterator arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::List<TagLib::String >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__listTTagLib__String_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->erase(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_front__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::String const &_result_ref = ((TagLib::List<TagLib::String > const *)arg1)->front();
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_front__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::String &_result_ref = (arg1)->front();
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_front(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_front__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_front__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_front'");
    return NULL;
}


static PyObject *_wrap_pystringlist_back__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::String const &_result_ref = ((TagLib::List<TagLib::String > const *)arg1)->back();
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_back__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::String &_result_ref = (arg1)->back();
        result = (TagLib::String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist_back(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_back__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__String_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pystringlist_back__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pystringlist_back'");
    return NULL;
}


static PyObject *_wrap_pystringlist_setAutoDelete(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist_setAutoDelete",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setAutoDelete(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    TagLib::List<TagLib::String > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((TagLib::List<TagLib::String > const *)arg1)->operator ==((TagLib::List<TagLib::String > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    TagLib::String *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                TagLib::String const &_result_ref = TagLib_List_Sl_TagLib_String_Sg____getitem__(arg1,arg2);
                result = (TagLib::String *) &_result_ref;
            }
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    TagLib::String *arg3 = 0 ;
    TagLib::String temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pystringlist___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = String(PyString_AsString(obj2));
            arg3 = &temp3;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            TagLib_List_Sl_TagLib_String_Sg____setitem__(arg1,arg2,(TagLib::String const &)*arg3);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pystringlist___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            TagLib_List_Sl_TagLib_String_Sg____delitem__(arg1,arg2);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    int arg3 ;
    TagLib::List<TagLib::String > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pystringlist___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = TagLib_List_Sl_TagLib_String_Sg____getslice__(arg1,arg2,arg3);
    
    {
        TagLib::List<TagLib::String > * resultptr;
        resultptr = new TagLib::List<TagLib::String >((TagLib::List<TagLib::String > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ListTTagLib__String_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pystringlist___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    TagLib_List_Sl_TagLib_String_Sg____delslice__(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    int arg2 ;
    int arg3 ;
    TagLib::List<TagLib::String > *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:pystringlist___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::String >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    TagLib_List_Sl_TagLib_String_Sg____setslice__(arg1,arg2,arg3,(TagLib::List<TagLib::String > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)TagLib_List_Sl_TagLib_String_Sg____len__(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pystringlist___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::String > *arg1 = (TagLib::List<TagLib::String > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pystringlist___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__String_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)TagLib_List_Sl_TagLib_String_Sg____nonzero__(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pystringlist_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ListTTagLib__String_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StringList__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_StringList")) goto fail;
    result = (TagLib::StringList *)new TagLib::StringList();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringList__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = 0 ;
    TagLib::StringList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringList",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::StringList *)new TagLib::StringList((TagLib::StringList const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringList__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = 0 ;
    TagLib::StringList *result;
    TagLib::String temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringList",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = String(PyString_AsString(obj0));
            arg1 = &temp1;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::StringList *)new TagLib::StringList((TagLib::String const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringList__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ByteVectorList *arg1 = 0 ;
    TagLib::String::Type arg2 ;
    TagLib::StringList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_StringList",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ByteVectorList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("ByteVectorList");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::StringList *)new TagLib::StringList((ByteVectorList const &)*arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringList__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ByteVectorList *arg1 = 0 ;
    TagLib::StringList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringList",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ByteVectorList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("ByteVectorList");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::StringList *)new TagLib::StringList((ByteVectorList const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringList(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_StringList__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_StringList__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_ByteVectorList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_StringList__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_StringList__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_ByteVectorList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_StringList__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_StringList'");
    return NULL;
}


static PyObject *_wrap_delete_StringList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StringList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringList_toString__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringList_toString",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::StringList const *)arg1)->toString((TagLib::String const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringList_toString__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringList_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::StringList const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringList_toString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_StringList_toString__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_StringList_toString__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'StringList_toString'");
    return NULL;
}


static PyObject *_wrap_StringList_append__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::StringList *result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringList_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        TagLib::StringList &_result_ref = (arg1)->append((TagLib::String const &)*arg2);
        result = (TagLib::StringList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringList_append__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
    TagLib::StringList *arg2 = 0 ;
    TagLib::StringList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringList_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::StringList &_result_ref = (arg1)->append((TagLib::StringList const &)*arg2);
        result = (TagLib::StringList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringList_append(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_StringList_append__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_StringList_append__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'StringList_append'");
    return NULL;
}


static PyObject *_wrap_StringList_split(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String *arg1 = 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::StringList result;
    TagLib::String temp1 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringList_split",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = String(PyString_AsString(obj0));
            arg1 = &temp1;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = TagLib::StringList::split((TagLib::String const &)*arg1,(TagLib::String const &)*arg2);
    
    {
        TagLib::StringList * resultptr;
        resultptr = new TagLib::StringList((TagLib::StringList &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__StringList, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StringList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__StringList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MPEGFile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::MPEG::Properties::ReadStyle arg3 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_MPEGFile",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::MPEG::Properties::ReadStyle)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1,arg2,(TagLib::MPEG::Properties::ReadStyle )arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MPEGFile",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MPEGFile",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    bool arg3 ;
    TagLib::MPEG::Properties::ReadStyle arg4 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_MPEGFile",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (TagLib::MPEG::Properties::ReadStyle)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1,arg2,arg3,(TagLib::MPEG::Properties::ReadStyle )arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    bool arg3 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_MPEGFile",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    TagLib::MPEG::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MPEGFile",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (TagLib::MPEG::File *)new TagLib::MPEG::File((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MPEGFile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_MPEGFile__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_MPEGFile__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_MPEGFile__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_MPEGFile__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_MPEGFile__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_MPEGFile__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MPEGFile'");
    return NULL;
}


static PyObject *_wrap_delete_MPEGFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MPEGFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Tag *)((TagLib::MPEG::File const *)arg1)->tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_audioProperties(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::MPEG::Properties *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_audioProperties",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::MPEG::Properties *)((TagLib::MPEG::File const *)arg1)->audioProperties();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MPEG__Properties, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_save__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_save",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->save();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_save__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_save",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->save(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_save(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MPEGFile_save__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_MPEGFile_save__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MPEGFile_save'");
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v2Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    bool arg2 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_ID3v2Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v2Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_ID3v2Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v2Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MPEGFile_ID3v2Tag__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_MPEGFile_ID3v2Tag__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MPEGFile_ID3v2Tag'");
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v1Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    bool arg2 ;
    TagLib::ID3v1::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_ID3v1Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v1Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::ID3v1::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_ID3v1Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_ID3v1Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MPEGFile_ID3v1Tag__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_MPEGFile_ID3v1Tag__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MPEGFile_ID3v1Tag'");
    return NULL;
}


static PyObject *_wrap_MPEGFile_APETag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    bool arg2 ;
    TagLib::APE::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_APETag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__APE__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_APETag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::APE::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_APETag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::APE::Tag *)(arg1)->APETag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__APE__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_APETag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MPEGFile_APETag__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_MPEGFile_APETag__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MPEGFile_APETag'");
    return NULL;
}


static PyObject *_wrap_MPEGFile_strip__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_strip",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->strip(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_strip__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_strip",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->strip();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_strip__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    int arg2 ;
    bool arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MPEGFile_strip",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->strip(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_strip(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MPEGFile_strip__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_MPEGFile_strip__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MPEG__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_MPEGFile_strip__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MPEGFile_strip'");
    return NULL;
}


static PyObject *_wrap_MPEGFile_setID3v2FrameFactory(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_setID3v2FrameFactory",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_firstFrameOffset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_firstFrameOffset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)(arg1)->firstFrameOffset();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_nextFrameOffset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    long arg2 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_nextFrameOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (long)(arg1)->nextFrameOffset(arg2);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_previousFrameOffset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    long arg2 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MPEGFile_previousFrameOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (long)(arg1)->previousFrameOffset(arg2);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MPEGFile_lastFrameOffset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MPEGFile_lastFrameOffset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MPEG__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)(arg1)->lastFrameOffset();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MPEGFile_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPEG__File, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Frame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Frame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_frameID(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_frameID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Frame const *)arg1)->frameID();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ID3v2::Frame const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_headerSize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint result;
    
    if(!PyArg_ParseTuple(args,(char *)":Frame_headerSize")) goto fail;
    result = (TagLib::uint)TagLib::ID3v2::Frame::headerSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_headerSize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::uint arg1 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_headerSize",&obj0)) goto fail;
    {
        arg1 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::uint)TagLib::ID3v2::Frame::headerSize(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_headerSize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_Frame_headerSize__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_Frame_headerSize__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Frame_headerSize'");
    return NULL;
}


static PyObject *_wrap_Frame_setData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Frame_setData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setData((TagLib::ByteVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_Frame_setText(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Frame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setText((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_toString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Frame const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_render(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_render",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Frame const *)arg1)->render();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame_textDelimiter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String::Type arg1 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame_textDelimiter",&obj0)) goto fail;
    {
        arg1 = (TagLib::String::Type)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = TagLib::ID3v2::Frame::textDelimiter((TagLib::String::Type )arg1);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame___str__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_ID3v2_Frame___str__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Frame___repr__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Frame___repr__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_ID3v2_Frame___repr__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Frame_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Frame, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ID3v2Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ID3v2Tag")) goto fail;
    result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ID3v2Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::File *arg1 = (TagLib::File *) 0 ;
    long arg2 ;
    TagLib::ID3v2::FrameFactory *arg3 = (TagLib::ID3v2::FrameFactory *) 0 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ID3v2Tag",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2,(TagLib::ID3v2::FrameFactory const *)arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ID3v2Tag__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::File *arg1 = (TagLib::File *) 0 ;
    long arg2 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ID3v2Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ID3v2Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ID3v2Tag__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_new_ID3v2Tag__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_ID3v2Tag__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ID3v2Tag'");
    return NULL;
}


static PyObject *_wrap_delete_ID3v2Tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ID3v2Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_title(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_title",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->title();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_artist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_artist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->artist();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_album(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_album",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->album();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_comment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_comment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->comment();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_genre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_genre",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->genre();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_year(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ID3v2::Tag const *)arg1)->year();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_track(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_track",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ID3v2::Tag const *)arg1)->track();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setTitle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setTitle((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setArtist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setArtist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setArtist((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setAlbum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setAlbum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setAlbum((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setComment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setComment((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setGenre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setGenre",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setGenre((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setYear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setYear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_setTrack(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_setTrack",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTrack(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::ID3v2::Tag const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_header(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::Header *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_header",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::Header *)((TagLib::ID3v2::Tag const *)arg1)->header();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Header, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_extendedHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::ExtendedHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_extendedHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::ExtendedHeader *)((TagLib::ID3v2::Tag const *)arg1)->extendedHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__ExtendedHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_footer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::Footer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_footer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::Footer *)((TagLib::ID3v2::Tag const *)arg1)->footer();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Footer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_frameListMap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::FrameListMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_frameListMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::FrameListMap const &_result_ref = ((TagLib::ID3v2::Tag const *)arg1)->frameListMap();
        result = (TagLib::ID3v2::FrameListMap *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_frameList__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::FrameList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_frameList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::FrameList const &_result_ref = ((TagLib::ID3v2::Tag const *)arg1)->frameList();
        result = (TagLib::ID3v2::FrameList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_frameList__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::ID3v2::FrameList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_frameList",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        TagLib::ID3v2::FrameList const &_result_ref = ((TagLib::ID3v2::Tag const *)arg1)->frameList((TagLib::ByteVector const &)*arg2);
        result = (TagLib::ID3v2::FrameList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0);
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_frameList(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ID3v2Tag_frameList__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ID3v2Tag_frameList__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ID3v2Tag_frameList'");
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_addFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_addFrame",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addFrame(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_removeFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ID3v2Tag_removeFrame",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->removeFrame(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_removeFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_removeFrame",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->removeFrame(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_removeFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ID3v2Tag_removeFrame__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_ID3v2Tag_removeFrame__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ID3v2Tag_removeFrame'");
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_removeFrames(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v2Tag_removeFrames",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->removeFrames((TagLib::ByteVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_ID3v2Tag_render(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v2Tag_render",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::Tag const *)arg1)->render();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ID3v2Tag_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Tag, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pyframelist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pyframelist")) goto fail;
    result = (TagLib::List<TagLib::ID3v2::Frame * > *)new TagLib::List<TagLib::ID3v2::Frame * >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyframelist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = 0 ;
    TagLib::List<TagLib::ID3v2::Frame * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pyframelist",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::List<TagLib::ID3v2::Frame * > *)new TagLib::List<TagLib::ID3v2::Frame * >((TagLib::List<TagLib::ID3v2::Frame * > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyframelist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pyframelist__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_pyframelist__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pyframelist'");
    return NULL;
}


static PyObject *_wrap_delete_pyframelist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pyframelist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::Iterator((TagLib::List<TagLib::ID3v2::Frame * >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->begin();
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator((TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_begin'");
    return NULL;
}


static PyObject *_wrap_pyframelist_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::Iterator((TagLib::List<TagLib::ID3v2::Frame * >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->end();
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator((TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_end'");
    return NULL;
}


static PyObject *_wrap_pyframelist_insert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::Iterator arg2 ;
    TagLib::ID3v2::Frame **arg3 = 0 ;
    TagLib::ID3v2::Frame *tmp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelist_insert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::List<TagLib::ID3v2::Frame * >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(
        obj2,(void **) &tmp3, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg3 = &tmp3;
    }
    (arg1)->insert(arg2,(TagLib::ID3v2::Frame *const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_sortedInsert__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    bool arg3 ;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelist_sortedInsert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->sortedInsert((TagLib::ID3v2::Frame *const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_sortedInsert__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_sortedInsert",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    (arg1)->sortedInsert((TagLib::ID3v2::Frame *const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_sortedInsert(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelist_sortedInsert__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_pyframelist_sortedInsert__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_sortedInsert'");
    return NULL;
}


static PyObject *_wrap_pyframelist_append__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    TagLib::List<TagLib::ID3v2::Frame * > *result;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    {
        TagLib::List<TagLib::ID3v2::Frame * > &_result_ref = (arg1)->append((TagLib::ID3v2::Frame *const &)*arg2);
        result = (TagLib::List<TagLib::ID3v2::Frame * > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_append__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * > *arg2 = 0 ;
    TagLib::List<TagLib::ID3v2::Frame * > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        TagLib::List<TagLib::ID3v2::Frame * > &_result_ref = (arg1)->append((TagLib::List<TagLib::ID3v2::Frame * > const &)*arg2);
        result = (TagLib::List<TagLib::ID3v2::Frame * > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_append(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelist_append__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelist_append__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_append'");
    return NULL;
}


static PyObject *_wrap_pyframelist_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::Iterator result;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    result = (arg1)->find((TagLib::ID3v2::Frame *const &)*arg2);
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::Iterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::Iterator((TagLib::List<TagLib::ID3v2::Frame * >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator result;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    result = ((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->find((TagLib::ID3v2::Frame *const &)*arg2);
    
    {
        TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator((TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelist_find__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_TagLib__ID3v2__Frame, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelist_find__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_find'");
    return NULL;
}


static PyObject *_wrap_pyframelist_contains(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **arg2 = 0 ;
    bool result;
    TagLib::ID3v2::Frame *tmp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(
        obj1,(void **) &tmp2, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg2 = &tmp2;
    }
    result = (bool)((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->contains((TagLib::ID3v2::Frame *const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * >::Iterator arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::List<TagLib::ID3v2::Frame * >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__listTTagLib__ID3v2__Frame_p_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->erase(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_front__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::Frame *const &_result_ref = ((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->front();
        result = (TagLib::ID3v2::Frame **) &_result_ref;
    }
    
    {
        Frame* retfrm =  (*result);
        resultobj = SWIG_NewPointerObj((void *) retfrm, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_front__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::Frame *&_result_ref = (arg1)->front();
        result = (TagLib::ID3v2::Frame **) &_result_ref;
    }
    
    {
        Frame* retfrm =  (*result);
        resultobj = SWIG_NewPointerObj((void *) retfrm, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_front(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_front__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_front__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_front'");
    return NULL;
}


static PyObject *_wrap_pyframelist_back__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::Frame *const &_result_ref = ((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->back();
        result = (TagLib::ID3v2::Frame **) &_result_ref;
    }
    
    {
        Frame* retfrm =  (*result);
        resultobj = SWIG_NewPointerObj((void *) retfrm, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_back__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::ID3v2::Frame **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::ID3v2::Frame *&_result_ref = (arg1)->back();
        result = (TagLib::ID3v2::Frame **) &_result_ref;
    }
    
    {
        Frame* retfrm =  (*result);
        resultobj = SWIG_NewPointerObj((void *) retfrm, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist_back(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_back__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelist_back__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelist_back'");
    return NULL;
}


static PyObject *_wrap_pyframelist_setAutoDelete(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist_setAutoDelete",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setAutoDelete(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    TagLib::List<TagLib::ID3v2::Frame * > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((TagLib::List<TagLib::ID3v2::Frame * > const *)arg1)->operator ==((TagLib::List<TagLib::ID3v2::Frame * > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    TagLib::ID3v2::Frame **result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                TagLib::ID3v2::Frame *const &_result_ref = TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____getitem__(arg1,arg2);
                result = (TagLib::ID3v2::Frame **) &_result_ref;
            }
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    {
        Frame* retfrm =  (*result);
        resultobj = SWIG_NewPointerObj((void *) retfrm, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    TagLib::ID3v2::Frame **arg3 = 0 ;
    TagLib::ID3v2::Frame *tmp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelist___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(
        obj2,(void **) &tmp3, 
        SWIGTYPE_p_TagLib__ID3v2__Frame,
        SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
        arg3 = &tmp3;
    }
    {
        try {
            TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____setitem__(arg1,arg2,(TagLib::ID3v2::Frame *const &)*arg3);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelist___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____delitem__(arg1,arg2);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_IndexError, const_cast<char*>(e.what()));
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    int arg3 ;
    TagLib::List<TagLib::ID3v2::Frame * > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelist___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____getslice__(arg1,arg2,arg3);
    
    {
        TagLib::List<TagLib::ID3v2::Frame * > * resultptr;
        resultptr = new TagLib::List<TagLib::ID3v2::Frame * >((TagLib::List<TagLib::ID3v2::Frame * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelist___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____delslice__(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    int arg2 ;
    int arg3 ;
    TagLib::List<TagLib::ID3v2::Frame * > *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:pyframelist___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("TagLib::List<TagLib::ID3v2::Frame * >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____setslice__(arg1,arg2,arg3,(TagLib::List<TagLib::ID3v2::Frame * > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____len__(arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelist___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::List<TagLib::ID3v2::Frame * > *arg1 = (TagLib::List<TagLib::ID3v2::Frame * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelist___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg____nonzero__(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pyframelist_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pyframelistmap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pyframelistmap")) goto fail;
    result = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *)new TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyframelistmap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pyframelistmap",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *)new TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList >((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyframelistmap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pyframelistmap__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_pyframelistmap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pyframelistmap'");
    return NULL;
}


static PyObject *_wrap_delete_pyframelistmap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pyframelistmap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->begin();
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelistmap_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelistmap_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelistmap_begin'");
    return NULL;
}


static PyObject *_wrap_pyframelistmap_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->end();
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelistmap_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyframelistmap_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelistmap_end'");
    return NULL;
}


static PyObject *_wrap_pyframelistmap_insert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::ID3v2::FrameList *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelistmap_insert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("TagLib::ID3v2::FrameList");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->insert((TagLib::ByteVector const &)*arg2,(TagLib::List<TagLib::ID3v2::Frame * > const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (arg1)->find((TagLib::ByteVector const &)*arg2);
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator, 1);
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->find((TagLib::ByteVector const &)*arg2);
    
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator((TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator, 1);
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelistmap_find__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_pyframelistmap_find__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyframelistmap_find'");
    return NULL;
}


static PyObject *_wrap_pyframelistmap_contains(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > const *)arg1)->contains((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->erase(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____nonzero__(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::ID3v2::FrameList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            {
                TagLib::ID3v2::FrameList &_result_ref = TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____getitem__(arg1,(TagLib::ByteVector const &)*arg2);
                result = (TagLib::ID3v2::FrameList *) &_result_ref;
            }
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_KeyError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 0);
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::ID3v2::FrameList *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyframelistmap___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TagLib__ListTTagLib__ID3v2__Frame_p_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("TagLib::ID3v2::FrameList");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____setitem__(arg1,(TagLib::ByteVector const &)*arg2,(TagLib::List<TagLib::ID3v2::Frame * > const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____delitem__(arg1,(TagLib::ByteVector const &)*arg2);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_KeyError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__has_key(arg1,(TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap_keys(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_values(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap_items(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyframelistmap___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyframelistmap___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____contains__(arg1,(TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_pyframelistmap___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyframelistmap___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____iter__(arg1);
            
        } catch (std::runtime_error& e) {
            PyErr_SetString(PyExc_RuntimeError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pyframelistmap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TextIdentificationFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::String::Type arg2 ;
    TagLib::ID3v2::TextIdentificationFrame *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_TextIdentificationFrame",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v2::TextIdentificationFrame *)new TagLib::ID3v2::TextIdentificationFrame((TagLib::ByteVector const &)*arg1,(TagLib::String::Type )arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_TextIdentificationFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::ID3v2::TextIdentificationFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TextIdentificationFrame",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::ID3v2::TextIdentificationFrame *)new TagLib::ID3v2::TextIdentificationFrame((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_TextIdentificationFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_TextIdentificationFrame__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_TextIdentificationFrame__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_TextIdentificationFrame'");
    return NULL;
}


static PyObject *_wrap_delete_TextIdentificationFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TextIdentificationFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_setText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::StringList *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextIdentificationFrame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setText((TagLib::StringList const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_setText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextIdentificationFrame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setText((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_setText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_TextIdentificationFrame_setText__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_TextIdentificationFrame_setText__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'TextIdentificationFrame_setText'");
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_toString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextIdentificationFrame_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_textEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::String::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextIdentificationFrame_textEncoding",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::String::Type)((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->textEncoding();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_setTextEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::String::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextIdentificationFrame_setTextEncoding",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTextEncoding((TagLib::String::Type )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_fieldList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
    TagLib::StringList result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextIdentificationFrame_fieldList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->fieldList();
    
    {
        TagLib::StringList * resultptr;
        resultptr = new TagLib::StringList((TagLib::StringList &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__StringList, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextIdentificationFrame_fromFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ID3v2::TextIdentificationFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextIdentificationFrame_fromFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::TextIdentificationFrame *)TextIdentificationFrame_fromFrame(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TextIdentificationFrame_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__TextIdentificationFrame, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_UserTextIdentificationFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String::Type arg1 ;
    TagLib::ID3v2::UserTextIdentificationFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_UserTextIdentificationFrame",&obj0)) goto fail;
    {
        arg1 = (TagLib::String::Type)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::String::Type )arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_UserTextIdentificationFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_UserTextIdentificationFrame")) goto fail;
    result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_UserTextIdentificationFrame__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::ID3v2::UserTextIdentificationFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_UserTextIdentificationFrame",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_UserTextIdentificationFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_UserTextIdentificationFrame__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_UserTextIdentificationFrame__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_UserTextIdentificationFrame__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_UserTextIdentificationFrame'");
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_toString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UserTextIdentificationFrame_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_description(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UserTextIdentificationFrame_description",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->description();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_setDescription(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UserTextIdentificationFrame_setDescription",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setDescription((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_fieldList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::StringList result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UserTextIdentificationFrame_fieldList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->fieldList();
    
    {
        TagLib::StringList * resultptr;
        resultptr = new TagLib::StringList((TagLib::StringList &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__StringList, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_setText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UserTextIdentificationFrame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setText((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_setText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    TagLib::StringList *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UserTextIdentificationFrame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setText((TagLib::StringList const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UserTextIdentificationFrame_setText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__StringList, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_UserTextIdentificationFrame_setText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_UserTextIdentificationFrame_setText__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'UserTextIdentificationFrame_setText'");
    return NULL;
}


static PyObject *_wrap_delete_UserTextIdentificationFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_UserTextIdentificationFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * UserTextIdentificationFrame_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__UserTextIdentificationFrame, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CommentsFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::String::Type arg1 ;
    TagLib::ID3v2::CommentsFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CommentsFrame",&obj0)) goto fail;
    {
        arg1 = (TagLib::String::Type)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame((TagLib::String::Type )arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CommentsFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CommentsFrame")) goto fail;
    result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CommentsFrame__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::ID3v2::CommentsFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CommentsFrame",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_CommentsFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_CommentsFrame__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CommentsFrame__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_CommentsFrame__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_CommentsFrame'");
    return NULL;
}


static PyObject *_wrap_delete_CommentsFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CommentsFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_toString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_language(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_language",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->language();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_description(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_description",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->description();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_text(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_text",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->text();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_setLanguage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CommentsFrame_setLanguage",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_CommentsFrame_setDescription(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CommentsFrame_setDescription",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setDescription((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_setText(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CommentsFrame_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setText((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_textEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_textEncoding",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::String::Type)((TagLib::ID3v2::CommentsFrame const *)arg1)->textEncoding();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_setTextEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
    TagLib::String::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CommentsFrame_setTextEncoding",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTextEncoding((TagLib::String::Type )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CommentsFrame_fromFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ID3v2::CommentsFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CommentsFrame_fromFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::CommentsFrame *)CommentsFrame_fromFrame(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CommentsFrame_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AttachedPictureFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AttachedPictureFrame")) goto fail;
    result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AttachedPictureFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::ID3v2::AttachedPictureFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AttachedPictureFrame",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_AttachedPictureFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AttachedPictureFrame__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AttachedPictureFrame__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AttachedPictureFrame'");
    return NULL;
}


static PyObject *_wrap_delete_AttachedPictureFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AttachedPictureFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_toString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_toString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->toString();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_textEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::String::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_textEncoding",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::String::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->textEncoding();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_setTextEncoding(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::String::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AttachedPictureFrame_setTextEncoding",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::String::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTextEncoding((TagLib::String::Type )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_mimeType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_mimeType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->mimeType();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_setMimeType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AttachedPictureFrame_setMimeType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setMimeType((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::ID3v2::AttachedPictureFrame::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::AttachedPictureFrame::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->type();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_setType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::ID3v2::AttachedPictureFrame::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AttachedPictureFrame_setType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::ID3v2::AttachedPictureFrame::Type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setType((TagLib::ID3v2::AttachedPictureFrame::Type )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_picture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_picture",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->picture();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_setPicture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AttachedPictureFrame_setPicture",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setPicture((TagLib::ByteVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_AttachedPictureFrame_fromFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
    TagLib::ID3v2::AttachedPictureFrame *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AttachedPictureFrame_fromFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::AttachedPictureFrame *)AttachedPictureFrame_fromFrame(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AttachedPictureFrame_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_StringHandler_parse(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
    TagLib::ByteVector *arg2 = 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringHandler_parse",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__StringHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            const char* cstr = PyString_AsString(obj1);
            unsigned int len = PyString_GET_SIZE(obj1);
            arg2 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::ID3v1::StringHandler const *)arg1)->parse((TagLib::ByteVector const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    {
        if (arg2) {
            delete arg2;
        }
    }
    return resultobj;
    fail:
    {
        if (arg2) {
            delete arg2;
        }
    }
    return NULL;
}


static PyObject *_wrap_StringHandler_render(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::ByteVector result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringHandler_render",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__StringHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::ID3v1::StringHandler const *)arg1)->render((TagLib::String const &)*arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringHandler(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::StringHandler *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_StringHandler")) goto fail;
    result = (TagLib::ID3v1::StringHandler *)new TagLib::ID3v1::StringHandler();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__StringHandler, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StringHandler(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StringHandler",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__StringHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StringHandler_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v1__StringHandler, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ID3v1Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ID3v1Tag")) goto fail;
    result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ID3v1Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::File *arg1 = (TagLib::File *) 0 ;
    long arg2 ;
    TagLib::ID3v1::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ID3v1Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ID3v1Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ID3v1Tag__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_new_ID3v1Tag__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ID3v1Tag'");
    return NULL;
}


static PyObject *_wrap_delete_ID3v1Tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ID3v1Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_render(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_render",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->render();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_fileIdentifier(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector result;
    
    if(!PyArg_ParseTuple(args,(char *)":ID3v1Tag_fileIdentifier")) goto fail;
    result = TagLib::ID3v1::Tag::fileIdentifier();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_title(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_title",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->title();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_artist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_artist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->artist();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_album(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_album",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->album();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_comment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_comment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->comment();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_genre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_genre",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::ID3v1::Tag const *)arg1)->genre();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_year(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ID3v1::Tag const *)arg1)->year();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_track(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_track",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::ID3v1::Tag const *)arg1)->track();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setTitle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setTitle((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setArtist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setArtist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setArtist((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setAlbum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setAlbum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setAlbum((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setComment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setComment((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setGenre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setGenre",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setGenre((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setYear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setYear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setTrack(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ID3v1Tag_setTrack",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__Tag, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTrack(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ID3v1Tag_setStringHandler(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ID3v1Tag_setStringHandler",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__ID3v1__StringHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    TagLib::ID3v1::Tag::setStringHandler((TagLib::ID3v1::StringHandler const *)arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ID3v1Tag_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v1__Tag, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_OggFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OggFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OggFile_packet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OggFile_packet",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->packet(arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OggFile_setPacket(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    TagLib::uint arg2 ;
    TagLib::ByteVector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OggFile_setPacket",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if (PyString_Check(obj2)) {
            const char* cstr = PyString_AsString(obj2);
            unsigned int len = PyString_GET_SIZE(obj2);
            arg3 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setPacket(arg2,(TagLib::ByteVector const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg3) {
            delete arg3;
        }
    }
    return resultobj;
    fail:
    {
        if (arg3) {
            delete arg3;
        }
    }
    return NULL;
}


static PyObject *_wrap_OggFile_firstPageHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    TagLib::Ogg::PageHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OggFile_firstPageHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Ogg::PageHeader *)(arg1)->firstPageHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__PageHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OggFile_lastPageHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    TagLib::Ogg::PageHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OggFile_lastPageHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Ogg::PageHeader *)(arg1)->lastPageHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__PageHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OggFile_save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OggFile_save",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->save();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OggFile_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__File, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VorbisFile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::Vorbis::Properties::ReadStyle arg3 ;
    TagLib::Vorbis::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_VorbisFile",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::Vorbis::Properties::ReadStyle)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File((char const *)arg1,arg2,(TagLib::Vorbis::Properties::ReadStyle )arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Vorbis__File, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VorbisFile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::Vorbis::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_VorbisFile",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Vorbis__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VorbisFile__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::Vorbis::File *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VorbisFile",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Vorbis__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VorbisFile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_VorbisFile__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_VorbisFile__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_VorbisFile__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_VorbisFile'");
    return NULL;
}


static PyObject *_wrap_delete_VorbisFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VorbisFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Vorbis__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VorbisFile_tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
    TagLib::Ogg::XiphComment *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VorbisFile_tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Vorbis__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Ogg::XiphComment *)((TagLib::Vorbis::File const *)arg1)->tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VorbisFile_audioProperties(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
    TagLib::Vorbis::Properties *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VorbisFile_audioProperties",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Vorbis__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Vorbis::Properties *)((TagLib::Vorbis::File const *)arg1)->audioProperties();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Vorbis__Properties, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VorbisFile_save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VorbisFile_save",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Vorbis__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->save();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VorbisFile_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__Vorbis__File, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_XiphComment__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_XiphComment")) goto fail;
    result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_XiphComment__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::ByteVector *arg1 = 0 ;
    TagLib::Ogg::XiphComment *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_XiphComment",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            const char* cstr = PyString_AsString(obj0);
            unsigned int len = PyString_GET_SIZE(obj0);
            arg1 = new ByteVector(cstr, len);
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment((TagLib::ByteVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 1);
    {
        if (arg1) {
            delete arg1;
        }
    }
    return resultobj;
    fail:
    {
        if (arg1) {
            delete arg1;
        }
    }
    return NULL;
}


static PyObject *_wrap_new_XiphComment(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_XiphComment__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__ByteVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_XiphComment__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_XiphComment'");
    return NULL;
}


static PyObject *_wrap_delete_XiphComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_XiphComment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_title(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_title",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->title();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_artist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_artist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->artist();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_album(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_album",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->album();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_comment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_comment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->comment();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_genre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_genre",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->genre();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_year(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->year();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_track(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_track",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->track();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setTitle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setTitle((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setArtist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setArtist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setArtist((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setAlbum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setAlbum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setAlbum((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setComment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setComment((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setGenre(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setGenre",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->setGenre((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setYear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setYear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_setTrack(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_setTrack",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TagLib::uint)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setTrack(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::Ogg::XiphComment const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_fieldCount(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_fieldCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->fieldCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_fieldListMap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::Ogg::FieldListMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_fieldListMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::Ogg::FieldListMap const &_result_ref = ((TagLib::Ogg::XiphComment const *)arg1)->fieldListMap();
        result = (TagLib::Ogg::FieldListMap *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_vendorID(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_vendorID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->vendorID();
    
    {
        resultobj = PyString_FromString((&result)->toCString());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_addField__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String *arg3 = 0 ;
    bool arg4 ;
    TagLib::String temp2 ;
    TagLib::String temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:XiphComment_addField",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = String(PyString_AsString(obj2));
            arg3 = &temp3;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->addField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_addField__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String *arg3 = 0 ;
    TagLib::String temp2 ;
    TagLib::String temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:XiphComment_addField",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = String(PyString_AsString(obj2));
            arg3 = &temp3;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->addField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_addField(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_XiphComment_addField__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_XiphComment_addField__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'XiphComment_addField'");
    return NULL;
}


static PyObject *_wrap_XiphComment_removeField__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String *arg3 = 0 ;
    TagLib::String temp2 ;
    TagLib::String temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:XiphComment_removeField",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = String(PyString_AsString(obj2));
            arg3 = &temp3;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->removeField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_removeField__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_removeField",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->removeField((TagLib::String const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_removeField(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_XiphComment_removeField__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_XiphComment_removeField__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'XiphComment_removeField'");
    return NULL;
}


static PyObject *_wrap_XiphComment_render__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:XiphComment_render",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Ogg::XiphComment const *)arg1)->render();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_render__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
    bool arg2 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:XiphComment_render",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__Ogg__XiphComment, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((TagLib::Ogg::XiphComment const *)arg1)->render(arg2);
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_XiphComment_render(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XiphComment_render__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_XiphComment_render__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'XiphComment_render'");
    return NULL;
}


static PyObject * XiphComment_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__XiphComment, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pyfieldlistmap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pyfieldlistmap")) goto fail;
    result = (TagLib::Map<TagLib::String,TagLib::StringList > *)new TagLib::Map<TagLib::String,TagLib::StringList >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyfieldlistmap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pyfieldlistmap",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("TagLib::Map<TagLib::String,TagLib::StringList >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (TagLib::Map<TagLib::String,TagLib::StringList > *)new TagLib::Map<TagLib::String,TagLib::StringList >((TagLib::Map<TagLib::String,TagLib::StringList > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pyfieldlistmap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pyfieldlistmap__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_pyfieldlistmap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pyfieldlistmap'");
    return NULL;
}


static PyObject *_wrap_delete_pyfieldlistmap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pyfieldlistmap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->begin();
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::Iterator((TagLib::Map<TagLib::String,TagLib::StringList >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_begin__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_begin",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->begin();
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator((TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyfieldlistmap_begin__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyfieldlistmap_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyfieldlistmap_begin'");
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::Iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->end();
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::Iterator((TagLib::Map<TagLib::String,TagLib::StringList >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_end__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->end();
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator((TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyfieldlistmap_end__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pyfieldlistmap_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyfieldlistmap_end'");
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_insert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::StringList *arg3 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyfieldlistmap_insert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->insert((TagLib::String const &)*arg2,(TagLib::StringList const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::uint)((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::Iterator result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (arg1)->find((TagLib::String const &)*arg2);
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::Iterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::Iterator((TagLib::Map<TagLib::String,TagLib::StringList >::Iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = ((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->find((TagLib::String const &)*arg2);
    
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator * resultptr;
        resultptr = new TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator((TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pyfieldlistmap_find__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_pyfieldlistmap_find__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pyfieldlistmap_find'");
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_contains(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)((TagLib::Map<TagLib::String,TagLib::StringList > const *)arg1)->contains((TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::Map<TagLib::String,TagLib::StringList >::Iterator arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        TagLib::Map<TagLib::String,TagLib::StringList >::Iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__mapTTagLib__String_TagLib__StringList_t__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("TagLib::Map<TagLib::String,TagLib::StringList >::Iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->erase(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____nonzero__(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::StringList *result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            {
                TagLib::StringList &_result_ref = TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____getitem__(arg1,(TagLib::String const &)*arg2);
                result = (TagLib::StringList *) &_result_ref;
            }
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_KeyError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__StringList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::StringList *arg3 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pyfieldlistmap___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TagLib__StringList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("TagLib::StringList");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____setitem__(arg1,(TagLib::String const &)*arg2,(TagLib::StringList const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____delitem__(arg1,(TagLib::String const &)*arg2);
            
        } catch (std::out_of_range& e) {
            PyErr_SetString(PyExc_KeyError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__has_key(arg1,(TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_keys(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_values(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap_items(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    TagLib::String *arg2 = 0 ;
    bool result;
    TagLib::String temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pyfieldlistmap___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = String(PyString_AsString(obj1));
            arg2 = &temp2;
        } else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (bool)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____contains__(arg1,(TagLib::String const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pyfieldlistmap___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::Map<TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map<TagLib::String,TagLib::StringList > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pyfieldlistmap___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____iter__(arg1);
            
        } catch (std::runtime_error& e) {
            PyErr_SetString(PyExc_RuntimeError,const_cast<char*>(e.what()));
            SWIG_fail;
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pyfieldlistmap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapTTagLib__String_TagLib__StringList_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FlacFile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::FLAC::Properties::ReadStyle arg3 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FlacFile",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (TagLib::FLAC::Properties::ReadStyle)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1,arg2,(TagLib::FLAC::Properties::ReadStyle )arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    bool arg2 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FlacFile",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FlacFile",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    bool arg3 ;
    TagLib::FLAC::Properties::ReadStyle arg4 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_FlacFile",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (TagLib::FLAC::Properties::ReadStyle)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1,arg2,arg3,(TagLib::FLAC::Properties::ReadStyle )arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    bool arg3 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FlacFile",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    TagLib::FLAC::File *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FlacFile",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (TagLib::FLAC::File *)new TagLib::FLAC::File((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__File, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FlacFile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FlacFile__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_FlacFile__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_FlacFile__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_FlacFile__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_FlacFile__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_FlacFile__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FlacFile'");
    return NULL;
}


static PyObject *_wrap_delete_FlacFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FlacFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_tag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Tag *)((TagLib::FLAC::File const *)arg1)->tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_audioProperties(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::FLAC::Properties *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_audioProperties",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::FLAC::Properties *)((TagLib::FLAC::File const *)arg1)->audioProperties();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__FLAC__Properties, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_save",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->save();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v2Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    bool arg2 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FlacFile_ID3v2Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v2Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::ID3v2::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_ID3v2Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v2Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FlacFile_ID3v2Tag__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_FlacFile_ID3v2Tag__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FlacFile_ID3v2Tag'");
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v1Tag__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    bool arg2 ;
    TagLib::ID3v1::Tag *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FlacFile_ID3v1Tag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v1Tag__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::ID3v1::Tag *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_ID3v1Tag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_ID3v1Tag(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FlacFile_ID3v1Tag__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_FlacFile_ID3v1Tag__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FlacFile_ID3v1Tag'");
    return NULL;
}


static PyObject *_wrap_FlacFile_xiphComment__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    bool arg2 ;
    TagLib::Ogg::XiphComment *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FlacFile_xiphComment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_xiphComment__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::Ogg::XiphComment *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_xiphComment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_xiphComment(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FlacFile_xiphComment__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_TagLib__FLAC__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_FlacFile_xiphComment__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FlacFile_xiphComment'");
    return NULL;
}


static PyObject *_wrap_FlacFile_setID3v2FrameFactory(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FlacFile_setID3v2FrameFactory",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_streamInfoData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    TagLib::ByteVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_streamInfoData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->streamInfoData();
    
    {
        TagLib::ByteVector * resultptr;
        resultptr = new TagLib::ByteVector((TagLib::ByteVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TagLib__ByteVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FlacFile_streamLength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FlacFile_streamLength",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TagLib__FLAC__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)(arg1)->streamLength();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FlacFile_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TagLib__FLAC__File, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_RefCounter", _wrap_new_RefCounter, METH_VARARGS, NULL},
	 { (char *)"RefCounter_ref", _wrap_RefCounter_ref, METH_VARARGS, NULL},
	 { (char *)"RefCounter_deref", _wrap_RefCounter_deref, METH_VARARGS, NULL},
	 { (char *)"RefCounter_count", _wrap_RefCounter_count, METH_VARARGS, NULL},
	 { (char *)"delete_RefCounter", _wrap_delete_RefCounter, METH_VARARGS, NULL},
	 { (char *)"RefCounter_swigregister", RefCounter_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_AudioProperties", _wrap_delete_AudioProperties, METH_VARARGS, NULL},
	 { (char *)"AudioProperties_length", _wrap_AudioProperties_length, METH_VARARGS, NULL},
	 { (char *)"AudioProperties_bitrate", _wrap_AudioProperties_bitrate, METH_VARARGS, NULL},
	 { (char *)"AudioProperties_sampleRate", _wrap_AudioProperties_sampleRate, METH_VARARGS, NULL},
	 { (char *)"AudioProperties_channels", _wrap_AudioProperties_channels, METH_VARARGS, NULL},
	 { (char *)"AudioProperties_swigregister", AudioProperties_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileRef", _wrap_new_FileRef, METH_VARARGS, NULL},
	 { (char *)"delete_FileRef", _wrap_delete_FileRef, METH_VARARGS, NULL},
	 { (char *)"FileRef_tag", _wrap_FileRef_tag, METH_VARARGS, NULL},
	 { (char *)"FileRef_audioProperties", _wrap_FileRef_audioProperties, METH_VARARGS, NULL},
	 { (char *)"FileRef_file", _wrap_FileRef_file, METH_VARARGS, NULL},
	 { (char *)"FileRef_save", _wrap_FileRef_save, METH_VARARGS, NULL},
	 { (char *)"FileRef_isNull", _wrap_FileRef_isNull, METH_VARARGS, NULL},
	 { (char *)"FileRef___eq__", _wrap_FileRef___eq__, METH_VARARGS, NULL},
	 { (char *)"FileRef___ne__", _wrap_FileRef___ne__, METH_VARARGS, NULL},
	 { (char *)"FileRef_create", _wrap_FileRef_create, METH_VARARGS, NULL},
	 { (char *)"FileRef_swigregister", FileRef_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ByteVector", _wrap_new_ByteVector, METH_VARARGS, NULL},
	 { (char *)"delete_ByteVector", _wrap_delete_ByteVector, METH_VARARGS, NULL},
	 { (char *)"ByteVector_setData", _wrap_ByteVector_setData, METH_VARARGS, NULL},
	 { (char *)"ByteVector_data", _wrap_ByteVector_data, METH_VARARGS, NULL},
	 { (char *)"ByteVector_mid", _wrap_ByteVector_mid, METH_VARARGS, NULL},
	 { (char *)"ByteVector_at", _wrap_ByteVector_at, METH_VARARGS, NULL},
	 { (char *)"ByteVector_find", _wrap_ByteVector_find, METH_VARARGS, NULL},
	 { (char *)"ByteVector_rfind", _wrap_ByteVector_rfind, METH_VARARGS, NULL},
	 { (char *)"ByteVector_containsAt", _wrap_ByteVector_containsAt, METH_VARARGS, NULL},
	 { (char *)"ByteVector_startsWith", _wrap_ByteVector_startsWith, METH_VARARGS, NULL},
	 { (char *)"ByteVector_endsWith", _wrap_ByteVector_endsWith, METH_VARARGS, NULL},
	 { (char *)"ByteVector_endsWithPartialMatch", _wrap_ByteVector_endsWithPartialMatch, METH_VARARGS, NULL},
	 { (char *)"ByteVector_append", _wrap_ByteVector_append, METH_VARARGS, NULL},
	 { (char *)"ByteVector_clear", _wrap_ByteVector_clear, METH_VARARGS, NULL},
	 { (char *)"ByteVector_size", _wrap_ByteVector_size, METH_VARARGS, NULL},
	 { (char *)"ByteVector_resize", _wrap_ByteVector_resize, METH_VARARGS, NULL},
	 { (char *)"ByteVector_begin", _wrap_ByteVector_begin, METH_VARARGS, NULL},
	 { (char *)"ByteVector_end", _wrap_ByteVector_end, METH_VARARGS, NULL},
	 { (char *)"ByteVector_isNull", _wrap_ByteVector_isNull, METH_VARARGS, NULL},
	 { (char *)"ByteVector_isEmpty", _wrap_ByteVector_isEmpty, METH_VARARGS, NULL},
	 { (char *)"ByteVector_checksum", _wrap_ByteVector_checksum, METH_VARARGS, NULL},
	 { (char *)"ByteVector_toUInt", _wrap_ByteVector_toUInt, METH_VARARGS, NULL},
	 { (char *)"ByteVector_toShort", _wrap_ByteVector_toShort, METH_VARARGS, NULL},
	 { (char *)"ByteVector_toLongLong", _wrap_ByteVector_toLongLong, METH_VARARGS, NULL},
	 { (char *)"ByteVector_fromUInt", _wrap_ByteVector_fromUInt, METH_VARARGS, NULL},
	 { (char *)"ByteVector_fromShort", _wrap_ByteVector_fromShort, METH_VARARGS, NULL},
	 { (char *)"ByteVector_fromLongLong", _wrap_ByteVector_fromLongLong, METH_VARARGS, NULL},
	 { (char *)"ByteVector_fromCString", _wrap_ByteVector_fromCString, METH_VARARGS, NULL},
	 { (char *)"ByteVector___eq__", _wrap_ByteVector___eq__, METH_VARARGS, NULL},
	 { (char *)"ByteVector___ne__", _wrap_ByteVector___ne__, METH_VARARGS, NULL},
	 { (char *)"ByteVector___lt__", _wrap_ByteVector___lt__, METH_VARARGS, NULL},
	 { (char *)"ByteVector___gt__", _wrap_ByteVector___gt__, METH_VARARGS, NULL},
	 { (char *)"ByteVector___add__", _wrap_ByteVector___add__, METH_VARARGS, NULL},
	 { (char *)"ByteVector___repr__", _wrap_ByteVector___repr__, METH_VARARGS, NULL},
	 { (char *)"ByteVector_swigregister", ByteVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_String", _wrap_new_String, METH_VARARGS, NULL},
	 { (char *)"delete_String", _wrap_delete_String, METH_VARARGS, NULL},
	 { (char *)"String_to8Bit", _wrap_String_to8Bit, METH_VARARGS, NULL},
	 { (char *)"String_toCString", _wrap_String_toCString, METH_VARARGS, NULL},
	 { (char *)"String_begin", _wrap_String_begin, METH_VARARGS, NULL},
	 { (char *)"String_end", _wrap_String_end, METH_VARARGS, NULL},
	 { (char *)"String_find", _wrap_String_find, METH_VARARGS, NULL},
	 { (char *)"String_substr", _wrap_String_substr, METH_VARARGS, NULL},
	 { (char *)"String_append", _wrap_String_append, METH_VARARGS, NULL},
	 { (char *)"String_upper", _wrap_String_upper, METH_VARARGS, NULL},
	 { (char *)"String_size", _wrap_String_size, METH_VARARGS, NULL},
	 { (char *)"String_isEmpty", _wrap_String_isEmpty, METH_VARARGS, NULL},
	 { (char *)"String_isNull", _wrap_String_isNull, METH_VARARGS, NULL},
	 { (char *)"String_data", _wrap_String_data, METH_VARARGS, NULL},
	 { (char *)"String_toInt", _wrap_String_toInt, METH_VARARGS, NULL},
	 { (char *)"String_stripWhiteSpace", _wrap_String_stripWhiteSpace, METH_VARARGS, NULL},
	 { (char *)"String_number", _wrap_String_number, METH_VARARGS, NULL},
	 { (char *)"String___eq__", _wrap_String___eq__, METH_VARARGS, NULL},
	 { (char *)"String___iadd__", _wrap_String___iadd__, METH_VARARGS, NULL},
	 { (char *)"String___lt__", _wrap_String___lt__, METH_VARARGS, NULL},
	 { (char *)"String___str__", _wrap_String___str__, METH_VARARGS, NULL},
	 { (char *)"String_swigregister", String_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Tag", _wrap_delete_Tag, METH_VARARGS, NULL},
	 { (char *)"Tag_title", _wrap_Tag_title, METH_VARARGS, NULL},
	 { (char *)"Tag_artist", _wrap_Tag_artist, METH_VARARGS, NULL},
	 { (char *)"Tag_album", _wrap_Tag_album, METH_VARARGS, NULL},
	 { (char *)"Tag_comment", _wrap_Tag_comment, METH_VARARGS, NULL},
	 { (char *)"Tag_genre", _wrap_Tag_genre, METH_VARARGS, NULL},
	 { (char *)"Tag_year", _wrap_Tag_year, METH_VARARGS, NULL},
	 { (char *)"Tag_track", _wrap_Tag_track, METH_VARARGS, NULL},
	 { (char *)"Tag_setTitle", _wrap_Tag_setTitle, METH_VARARGS, NULL},
	 { (char *)"Tag_setArtist", _wrap_Tag_setArtist, METH_VARARGS, NULL},
	 { (char *)"Tag_setAlbum", _wrap_Tag_setAlbum, METH_VARARGS, NULL},
	 { (char *)"Tag_setComment", _wrap_Tag_setComment, METH_VARARGS, NULL},
	 { (char *)"Tag_setGenre", _wrap_Tag_setGenre, METH_VARARGS, NULL},
	 { (char *)"Tag_setYear", _wrap_Tag_setYear, METH_VARARGS, NULL},
	 { (char *)"Tag_setTrack", _wrap_Tag_setTrack, METH_VARARGS, NULL},
	 { (char *)"Tag_isEmpty", _wrap_Tag_isEmpty, METH_VARARGS, NULL},
	 { (char *)"Tag_duplicate", _wrap_Tag_duplicate, METH_VARARGS, NULL},
	 { (char *)"Tag_swigregister", Tag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pystringlist", _wrap_new_pystringlist, METH_VARARGS, NULL},
	 { (char *)"delete_pystringlist", _wrap_delete_pystringlist, METH_VARARGS, NULL},
	 { (char *)"pystringlist_begin", _wrap_pystringlist_begin, METH_VARARGS, NULL},
	 { (char *)"pystringlist_end", _wrap_pystringlist_end, METH_VARARGS, NULL},
	 { (char *)"pystringlist_insert", _wrap_pystringlist_insert, METH_VARARGS, NULL},
	 { (char *)"pystringlist_sortedInsert", _wrap_pystringlist_sortedInsert, METH_VARARGS, NULL},
	 { (char *)"pystringlist_append", _wrap_pystringlist_append, METH_VARARGS, NULL},
	 { (char *)"pystringlist_clear", _wrap_pystringlist_clear, METH_VARARGS, NULL},
	 { (char *)"pystringlist_size", _wrap_pystringlist_size, METH_VARARGS, NULL},
	 { (char *)"pystringlist_isEmpty", _wrap_pystringlist_isEmpty, METH_VARARGS, NULL},
	 { (char *)"pystringlist_find", _wrap_pystringlist_find, METH_VARARGS, NULL},
	 { (char *)"pystringlist_contains", _wrap_pystringlist_contains, METH_VARARGS, NULL},
	 { (char *)"pystringlist_erase", _wrap_pystringlist_erase, METH_VARARGS, NULL},
	 { (char *)"pystringlist_front", _wrap_pystringlist_front, METH_VARARGS, NULL},
	 { (char *)"pystringlist_back", _wrap_pystringlist_back, METH_VARARGS, NULL},
	 { (char *)"pystringlist_setAutoDelete", _wrap_pystringlist_setAutoDelete, METH_VARARGS, NULL},
	 { (char *)"pystringlist___eq__", _wrap_pystringlist___eq__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___getitem__", _wrap_pystringlist___getitem__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___setitem__", _wrap_pystringlist___setitem__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___delitem__", _wrap_pystringlist___delitem__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___getslice__", _wrap_pystringlist___getslice__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___delslice__", _wrap_pystringlist___delslice__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___setslice__", _wrap_pystringlist___setslice__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___len__", _wrap_pystringlist___len__, METH_VARARGS, NULL},
	 { (char *)"pystringlist___nonzero__", _wrap_pystringlist___nonzero__, METH_VARARGS, NULL},
	 { (char *)"pystringlist_swigregister", pystringlist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StringList", _wrap_new_StringList, METH_VARARGS, NULL},
	 { (char *)"delete_StringList", _wrap_delete_StringList, METH_VARARGS, NULL},
	 { (char *)"StringList_toString", _wrap_StringList_toString, METH_VARARGS, NULL},
	 { (char *)"StringList_append", _wrap_StringList_append, METH_VARARGS, NULL},
	 { (char *)"StringList_split", _wrap_StringList_split, METH_VARARGS, NULL},
	 { (char *)"StringList_swigregister", StringList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MPEGFile", _wrap_new_MPEGFile, METH_VARARGS, NULL},
	 { (char *)"delete_MPEGFile", _wrap_delete_MPEGFile, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_tag", _wrap_MPEGFile_tag, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_audioProperties", _wrap_MPEGFile_audioProperties, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_save", _wrap_MPEGFile_save, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_ID3v2Tag", _wrap_MPEGFile_ID3v2Tag, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_ID3v1Tag", _wrap_MPEGFile_ID3v1Tag, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_APETag", _wrap_MPEGFile_APETag, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_strip", _wrap_MPEGFile_strip, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_setID3v2FrameFactory", _wrap_MPEGFile_setID3v2FrameFactory, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_firstFrameOffset", _wrap_MPEGFile_firstFrameOffset, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_nextFrameOffset", _wrap_MPEGFile_nextFrameOffset, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_previousFrameOffset", _wrap_MPEGFile_previousFrameOffset, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_lastFrameOffset", _wrap_MPEGFile_lastFrameOffset, METH_VARARGS, NULL},
	 { (char *)"MPEGFile_swigregister", MPEGFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Frame", _wrap_delete_Frame, METH_VARARGS, NULL},
	 { (char *)"Frame_frameID", _wrap_Frame_frameID, METH_VARARGS, NULL},
	 { (char *)"Frame_size", _wrap_Frame_size, METH_VARARGS, NULL},
	 { (char *)"Frame_headerSize", _wrap_Frame_headerSize, METH_VARARGS, NULL},
	 { (char *)"Frame_setData", _wrap_Frame_setData, METH_VARARGS, NULL},
	 { (char *)"Frame_setText", _wrap_Frame_setText, METH_VARARGS, NULL},
	 { (char *)"Frame_toString", _wrap_Frame_toString, METH_VARARGS, NULL},
	 { (char *)"Frame_render", _wrap_Frame_render, METH_VARARGS, NULL},
	 { (char *)"Frame_textDelimiter", _wrap_Frame_textDelimiter, METH_VARARGS, NULL},
	 { (char *)"Frame___str__", _wrap_Frame___str__, METH_VARARGS, NULL},
	 { (char *)"Frame___repr__", _wrap_Frame___repr__, METH_VARARGS, NULL},
	 { (char *)"Frame_swigregister", Frame_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ID3v2Tag", _wrap_new_ID3v2Tag, METH_VARARGS, NULL},
	 { (char *)"delete_ID3v2Tag", _wrap_delete_ID3v2Tag, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_title", _wrap_ID3v2Tag_title, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_artist", _wrap_ID3v2Tag_artist, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_album", _wrap_ID3v2Tag_album, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_comment", _wrap_ID3v2Tag_comment, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_genre", _wrap_ID3v2Tag_genre, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_year", _wrap_ID3v2Tag_year, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_track", _wrap_ID3v2Tag_track, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setTitle", _wrap_ID3v2Tag_setTitle, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setArtist", _wrap_ID3v2Tag_setArtist, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setAlbum", _wrap_ID3v2Tag_setAlbum, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setComment", _wrap_ID3v2Tag_setComment, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setGenre", _wrap_ID3v2Tag_setGenre, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setYear", _wrap_ID3v2Tag_setYear, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_setTrack", _wrap_ID3v2Tag_setTrack, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_isEmpty", _wrap_ID3v2Tag_isEmpty, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_header", _wrap_ID3v2Tag_header, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_extendedHeader", _wrap_ID3v2Tag_extendedHeader, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_footer", _wrap_ID3v2Tag_footer, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_frameListMap", _wrap_ID3v2Tag_frameListMap, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_frameList", _wrap_ID3v2Tag_frameList, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_addFrame", _wrap_ID3v2Tag_addFrame, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_removeFrame", _wrap_ID3v2Tag_removeFrame, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_removeFrames", _wrap_ID3v2Tag_removeFrames, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_render", _wrap_ID3v2Tag_render, METH_VARARGS, NULL},
	 { (char *)"ID3v2Tag_swigregister", ID3v2Tag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pyframelist", _wrap_new_pyframelist, METH_VARARGS, NULL},
	 { (char *)"delete_pyframelist", _wrap_delete_pyframelist, METH_VARARGS, NULL},
	 { (char *)"pyframelist_begin", _wrap_pyframelist_begin, METH_VARARGS, NULL},
	 { (char *)"pyframelist_end", _wrap_pyframelist_end, METH_VARARGS, NULL},
	 { (char *)"pyframelist_insert", _wrap_pyframelist_insert, METH_VARARGS, NULL},
	 { (char *)"pyframelist_sortedInsert", _wrap_pyframelist_sortedInsert, METH_VARARGS, NULL},
	 { (char *)"pyframelist_append", _wrap_pyframelist_append, METH_VARARGS, NULL},
	 { (char *)"pyframelist_clear", _wrap_pyframelist_clear, METH_VARARGS, NULL},
	 { (char *)"pyframelist_size", _wrap_pyframelist_size, METH_VARARGS, NULL},
	 { (char *)"pyframelist_isEmpty", _wrap_pyframelist_isEmpty, METH_VARARGS, NULL},
	 { (char *)"pyframelist_find", _wrap_pyframelist_find, METH_VARARGS, NULL},
	 { (char *)"pyframelist_contains", _wrap_pyframelist_contains, METH_VARARGS, NULL},
	 { (char *)"pyframelist_erase", _wrap_pyframelist_erase, METH_VARARGS, NULL},
	 { (char *)"pyframelist_front", _wrap_pyframelist_front, METH_VARARGS, NULL},
	 { (char *)"pyframelist_back", _wrap_pyframelist_back, METH_VARARGS, NULL},
	 { (char *)"pyframelist_setAutoDelete", _wrap_pyframelist_setAutoDelete, METH_VARARGS, NULL},
	 { (char *)"pyframelist___eq__", _wrap_pyframelist___eq__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___getitem__", _wrap_pyframelist___getitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___setitem__", _wrap_pyframelist___setitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___delitem__", _wrap_pyframelist___delitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___getslice__", _wrap_pyframelist___getslice__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___delslice__", _wrap_pyframelist___delslice__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___setslice__", _wrap_pyframelist___setslice__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___len__", _wrap_pyframelist___len__, METH_VARARGS, NULL},
	 { (char *)"pyframelist___nonzero__", _wrap_pyframelist___nonzero__, METH_VARARGS, NULL},
	 { (char *)"pyframelist_swigregister", pyframelist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pyframelistmap", _wrap_new_pyframelistmap, METH_VARARGS, NULL},
	 { (char *)"delete_pyframelistmap", _wrap_delete_pyframelistmap, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_begin", _wrap_pyframelistmap_begin, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_end", _wrap_pyframelistmap_end, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_insert", _wrap_pyframelistmap_insert, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_clear", _wrap_pyframelistmap_clear, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_size", _wrap_pyframelistmap_size, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_isEmpty", _wrap_pyframelistmap_isEmpty, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_find", _wrap_pyframelistmap_find, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_contains", _wrap_pyframelistmap_contains, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_erase", _wrap_pyframelistmap_erase, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___nonzero__", _wrap_pyframelistmap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___getitem__", _wrap_pyframelistmap___getitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___setitem__", _wrap_pyframelistmap___setitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___delitem__", _wrap_pyframelistmap___delitem__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_has_key", _wrap_pyframelistmap_has_key, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_keys", _wrap_pyframelistmap_keys, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_values", _wrap_pyframelistmap_values, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_items", _wrap_pyframelistmap_items, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___contains__", _wrap_pyframelistmap___contains__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap___iter__", _wrap_pyframelistmap___iter__, METH_VARARGS, NULL},
	 { (char *)"pyframelistmap_swigregister", pyframelistmap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TextIdentificationFrame", _wrap_new_TextIdentificationFrame, METH_VARARGS, NULL},
	 { (char *)"delete_TextIdentificationFrame", _wrap_delete_TextIdentificationFrame, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_setText", _wrap_TextIdentificationFrame_setText, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_toString", _wrap_TextIdentificationFrame_toString, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_textEncoding", _wrap_TextIdentificationFrame_textEncoding, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_setTextEncoding", _wrap_TextIdentificationFrame_setTextEncoding, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_fieldList", _wrap_TextIdentificationFrame_fieldList, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_fromFrame", _wrap_TextIdentificationFrame_fromFrame, METH_VARARGS, NULL},
	 { (char *)"TextIdentificationFrame_swigregister", TextIdentificationFrame_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UserTextIdentificationFrame", _wrap_new_UserTextIdentificationFrame, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_toString", _wrap_UserTextIdentificationFrame_toString, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_description", _wrap_UserTextIdentificationFrame_description, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_setDescription", _wrap_UserTextIdentificationFrame_setDescription, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_fieldList", _wrap_UserTextIdentificationFrame_fieldList, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_setText", _wrap_UserTextIdentificationFrame_setText, METH_VARARGS, NULL},
	 { (char *)"delete_UserTextIdentificationFrame", _wrap_delete_UserTextIdentificationFrame, METH_VARARGS, NULL},
	 { (char *)"UserTextIdentificationFrame_swigregister", UserTextIdentificationFrame_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CommentsFrame", _wrap_new_CommentsFrame, METH_VARARGS, NULL},
	 { (char *)"delete_CommentsFrame", _wrap_delete_CommentsFrame, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_toString", _wrap_CommentsFrame_toString, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_language", _wrap_CommentsFrame_language, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_description", _wrap_CommentsFrame_description, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_text", _wrap_CommentsFrame_text, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_setLanguage", _wrap_CommentsFrame_setLanguage, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_setDescription", _wrap_CommentsFrame_setDescription, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_setText", _wrap_CommentsFrame_setText, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_textEncoding", _wrap_CommentsFrame_textEncoding, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_setTextEncoding", _wrap_CommentsFrame_setTextEncoding, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_fromFrame", _wrap_CommentsFrame_fromFrame, METH_VARARGS, NULL},
	 { (char *)"CommentsFrame_swigregister", CommentsFrame_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AttachedPictureFrame", _wrap_new_AttachedPictureFrame, METH_VARARGS, NULL},
	 { (char *)"delete_AttachedPictureFrame", _wrap_delete_AttachedPictureFrame, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_toString", _wrap_AttachedPictureFrame_toString, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_textEncoding", _wrap_AttachedPictureFrame_textEncoding, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_setTextEncoding", _wrap_AttachedPictureFrame_setTextEncoding, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_mimeType", _wrap_AttachedPictureFrame_mimeType, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_setMimeType", _wrap_AttachedPictureFrame_setMimeType, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_type", _wrap_AttachedPictureFrame_type, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_setType", _wrap_AttachedPictureFrame_setType, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_picture", _wrap_AttachedPictureFrame_picture, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_setPicture", _wrap_AttachedPictureFrame_setPicture, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_fromFrame", _wrap_AttachedPictureFrame_fromFrame, METH_VARARGS, NULL},
	 { (char *)"AttachedPictureFrame_swigregister", AttachedPictureFrame_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringHandler_parse", _wrap_StringHandler_parse, METH_VARARGS, NULL},
	 { (char *)"StringHandler_render", _wrap_StringHandler_render, METH_VARARGS, NULL},
	 { (char *)"new_StringHandler", _wrap_new_StringHandler, METH_VARARGS, NULL},
	 { (char *)"delete_StringHandler", _wrap_delete_StringHandler, METH_VARARGS, NULL},
	 { (char *)"StringHandler_swigregister", StringHandler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ID3v1Tag", _wrap_new_ID3v1Tag, METH_VARARGS, NULL},
	 { (char *)"delete_ID3v1Tag", _wrap_delete_ID3v1Tag, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_render", _wrap_ID3v1Tag_render, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_fileIdentifier", _wrap_ID3v1Tag_fileIdentifier, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_title", _wrap_ID3v1Tag_title, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_artist", _wrap_ID3v1Tag_artist, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_album", _wrap_ID3v1Tag_album, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_comment", _wrap_ID3v1Tag_comment, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_genre", _wrap_ID3v1Tag_genre, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_year", _wrap_ID3v1Tag_year, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_track", _wrap_ID3v1Tag_track, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setTitle", _wrap_ID3v1Tag_setTitle, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setArtist", _wrap_ID3v1Tag_setArtist, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setAlbum", _wrap_ID3v1Tag_setAlbum, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setComment", _wrap_ID3v1Tag_setComment, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setGenre", _wrap_ID3v1Tag_setGenre, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setYear", _wrap_ID3v1Tag_setYear, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setTrack", _wrap_ID3v1Tag_setTrack, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_setStringHandler", _wrap_ID3v1Tag_setStringHandler, METH_VARARGS, NULL},
	 { (char *)"ID3v1Tag_swigregister", ID3v1Tag_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_OggFile", _wrap_delete_OggFile, METH_VARARGS, NULL},
	 { (char *)"OggFile_packet", _wrap_OggFile_packet, METH_VARARGS, NULL},
	 { (char *)"OggFile_setPacket", _wrap_OggFile_setPacket, METH_VARARGS, NULL},
	 { (char *)"OggFile_firstPageHeader", _wrap_OggFile_firstPageHeader, METH_VARARGS, NULL},
	 { (char *)"OggFile_lastPageHeader", _wrap_OggFile_lastPageHeader, METH_VARARGS, NULL},
	 { (char *)"OggFile_save", _wrap_OggFile_save, METH_VARARGS, NULL},
	 { (char *)"OggFile_swigregister", OggFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VorbisFile", _wrap_new_VorbisFile, METH_VARARGS, NULL},
	 { (char *)"delete_VorbisFile", _wrap_delete_VorbisFile, METH_VARARGS, NULL},
	 { (char *)"VorbisFile_tag", _wrap_VorbisFile_tag, METH_VARARGS, NULL},
	 { (char *)"VorbisFile_audioProperties", _wrap_VorbisFile_audioProperties, METH_VARARGS, NULL},
	 { (char *)"VorbisFile_save", _wrap_VorbisFile_save, METH_VARARGS, NULL},
	 { (char *)"VorbisFile_swigregister", VorbisFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_XiphComment", _wrap_new_XiphComment, METH_VARARGS, NULL},
	 { (char *)"delete_XiphComment", _wrap_delete_XiphComment, METH_VARARGS, NULL},
	 { (char *)"XiphComment_title", _wrap_XiphComment_title, METH_VARARGS, NULL},
	 { (char *)"XiphComment_artist", _wrap_XiphComment_artist, METH_VARARGS, NULL},
	 { (char *)"XiphComment_album", _wrap_XiphComment_album, METH_VARARGS, NULL},
	 { (char *)"XiphComment_comment", _wrap_XiphComment_comment, METH_VARARGS, NULL},
	 { (char *)"XiphComment_genre", _wrap_XiphComment_genre, METH_VARARGS, NULL},
	 { (char *)"XiphComment_year", _wrap_XiphComment_year, METH_VARARGS, NULL},
	 { (char *)"XiphComment_track", _wrap_XiphComment_track, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setTitle", _wrap_XiphComment_setTitle, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setArtist", _wrap_XiphComment_setArtist, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setAlbum", _wrap_XiphComment_setAlbum, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setComment", _wrap_XiphComment_setComment, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setGenre", _wrap_XiphComment_setGenre, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setYear", _wrap_XiphComment_setYear, METH_VARARGS, NULL},
	 { (char *)"XiphComment_setTrack", _wrap_XiphComment_setTrack, METH_VARARGS, NULL},
	 { (char *)"XiphComment_isEmpty", _wrap_XiphComment_isEmpty, METH_VARARGS, NULL},
	 { (char *)"XiphComment_fieldCount", _wrap_XiphComment_fieldCount, METH_VARARGS, NULL},
	 { (char *)"XiphComment_fieldListMap", _wrap_XiphComment_fieldListMap, METH_VARARGS, NULL},
	 { (char *)"XiphComment_vendorID", _wrap_XiphComment_vendorID, METH_VARARGS, NULL},
	 { (char *)"XiphComment_addField", _wrap_XiphComment_addField, METH_VARARGS, NULL},
	 { (char *)"XiphComment_removeField", _wrap_XiphComment_removeField, METH_VARARGS, NULL},
	 { (char *)"XiphComment_render", _wrap_XiphComment_render, METH_VARARGS, NULL},
	 { (char *)"XiphComment_swigregister", XiphComment_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pyfieldlistmap", _wrap_new_pyfieldlistmap, METH_VARARGS, NULL},
	 { (char *)"delete_pyfieldlistmap", _wrap_delete_pyfieldlistmap, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_begin", _wrap_pyfieldlistmap_begin, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_end", _wrap_pyfieldlistmap_end, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_insert", _wrap_pyfieldlistmap_insert, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_clear", _wrap_pyfieldlistmap_clear, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_size", _wrap_pyfieldlistmap_size, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_isEmpty", _wrap_pyfieldlistmap_isEmpty, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_find", _wrap_pyfieldlistmap_find, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_contains", _wrap_pyfieldlistmap_contains, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_erase", _wrap_pyfieldlistmap_erase, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___nonzero__", _wrap_pyfieldlistmap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___getitem__", _wrap_pyfieldlistmap___getitem__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___setitem__", _wrap_pyfieldlistmap___setitem__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___delitem__", _wrap_pyfieldlistmap___delitem__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_has_key", _wrap_pyfieldlistmap_has_key, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_keys", _wrap_pyfieldlistmap_keys, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_values", _wrap_pyfieldlistmap_values, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_items", _wrap_pyfieldlistmap_items, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___contains__", _wrap_pyfieldlistmap___contains__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap___iter__", _wrap_pyfieldlistmap___iter__, METH_VARARGS, NULL},
	 { (char *)"pyfieldlistmap_swigregister", pyfieldlistmap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FlacFile", _wrap_new_FlacFile, METH_VARARGS, NULL},
	 { (char *)"delete_FlacFile", _wrap_delete_FlacFile, METH_VARARGS, NULL},
	 { (char *)"FlacFile_tag", _wrap_FlacFile_tag, METH_VARARGS, NULL},
	 { (char *)"FlacFile_audioProperties", _wrap_FlacFile_audioProperties, METH_VARARGS, NULL},
	 { (char *)"FlacFile_save", _wrap_FlacFile_save, METH_VARARGS, NULL},
	 { (char *)"FlacFile_ID3v2Tag", _wrap_FlacFile_ID3v2Tag, METH_VARARGS, NULL},
	 { (char *)"FlacFile_ID3v1Tag", _wrap_FlacFile_ID3v1Tag, METH_VARARGS, NULL},
	 { (char *)"FlacFile_xiphComment", _wrap_FlacFile_xiphComment, METH_VARARGS, NULL},
	 { (char *)"FlacFile_setID3v2FrameFactory", _wrap_FlacFile_setID3v2FrameFactory, METH_VARARGS, NULL},
	 { (char *)"FlacFile_streamInfoData", _wrap_FlacFile_streamInfoData, METH_VARARGS, NULL},
	 { (char *)"FlacFile_streamLength", _wrap_FlacFile_streamLength, METH_VARARGS, NULL},
	 { (char *)"FlacFile_swigregister", FlacFile_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TagLib__MPEG__FileTo_p_TagLib__File(void *x) {
    return (void *)((TagLib::File *)  ((TagLib::MPEG::File *) x));
}
static void *_p_TagLib__Ogg__FileTo_p_TagLib__File(void *x) {
    return (void *)((TagLib::File *)  ((TagLib::Ogg::File *) x));
}
static void *_p_TagLib__Vorbis__FileTo_p_TagLib__File(void *x) {
    return (void *)((TagLib::File *) (TagLib::Ogg::File *) ((TagLib::Vorbis::File *) x));
}
static void *_p_TagLib__FLAC__FileTo_p_TagLib__File(void *x) {
    return (void *)((TagLib::File *)  ((TagLib::FLAC::File *) x));
}
static void *_p_TagLib__StringListTo_p_TagLib__ListTTagLib__String_t(void *x) {
    return (void *)((TagLib::List<TagLib::String > *)  ((TagLib::StringList *) x));
}
static void *_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__TextIdentificationFrame(void *x) {
    return (void *)((TagLib::ID3v2::TextIdentificationFrame *)  ((TagLib::ID3v2::UserTextIdentificationFrame *) x));
}
static void *_p_TagLib__MPEG__PropertiesTo_p_TagLib__AudioProperties(void *x) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::MPEG::Properties *) x));
}
static void *_p_TagLib__Vorbis__PropertiesTo_p_TagLib__AudioProperties(void *x) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::Vorbis::Properties *) x));
}
static void *_p_TagLib__FLAC__PropertiesTo_p_TagLib__AudioProperties(void *x) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::FLAC::Properties *) x));
}
static void *_p_TagLib__Vorbis__FileTo_p_TagLib__Ogg__File(void *x) {
    return (void *)((TagLib::Ogg::File *)  ((TagLib::Vorbis::File *) x));
}
static void *_p_p_TagLib__ID3v2__CommentsFrameTo_p_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame **)  ((TagLib::ID3v2::CommentsFrame **) x));
}
static void *_p_p_TagLib__ID3v2__AttachedPictureFrameTo_p_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame **)  ((TagLib::ID3v2::AttachedPictureFrame **) x));
}
static void *_p_p_TagLib__ID3v2__TextIdentificationFrameTo_p_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame **)  ((TagLib::ID3v2::TextIdentificationFrame **) x));
}
static void *_p_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame **) (TagLib::ID3v2::TextIdentificationFrame *) ((TagLib::ID3v2::UserTextIdentificationFrame **) x));
}
static void *_p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::CommentsFrame *) x));
}
static void *_p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::AttachedPictureFrame *) x));
}
static void *_p_TagLib__ID3v2__TextIdentificationFrameTo_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::TextIdentificationFrame *) x));
}
static void *_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__Frame(void *x) {
    return (void *)((TagLib::ID3v2::Frame *) (TagLib::ID3v2::TextIdentificationFrame *) ((TagLib::ID3v2::UserTextIdentificationFrame *) x));
}
static void *_p_TagLib__Ogg__XiphCommentTo_p_TagLib__Tag(void *x) {
    return (void *)((TagLib::Tag *)  ((TagLib::Ogg::XiphComment *) x));
}
static void *_p_TagLib__ID3v1__TagTo_p_TagLib__Tag(void *x) {
    return (void *)((TagLib::Tag *)  ((TagLib::ID3v1::Tag *) x));
}
static void *_p_TagLib__ID3v2__TagTo_p_TagLib__Tag(void *x) {
    return (void *)((TagLib::Tag *)  ((TagLib::ID3v2::Tag *) x));
}
static swig_type_info _swigt__p_Key[] = {{"_p_Key", 0, "Key *", 0, 0, 0, 0},{"_p_Key", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_wchar_t[] = {{"_p_wchar_t", 0, "wchar_t *|TagLib::wchar *", 0, 0, 0, 0},{"_p_wchar_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__Header[] = {{"_p_TagLib__ID3v2__Header", 0, "TagLib::ID3v2::Header *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__Header", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Ogg__PageHeader[] = {{"_p_TagLib__Ogg__PageHeader", 0, "TagLib::Ogg::PageHeader *", 0, 0, 0, 0},{"_p_TagLib__Ogg__PageHeader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__File[] = {{"_p_TagLib__File", 0, "TagLib::File *", 0, 0, 0, 0},{"_p_TagLib__MPEG__File", _p_TagLib__MPEG__FileTo_p_TagLib__File, 0, 0, 0, 0, 0},{"_p_TagLib__Ogg__File", _p_TagLib__Ogg__FileTo_p_TagLib__File, 0, 0, 0, 0, 0},{"_p_TagLib__Vorbis__File", _p_TagLib__Vorbis__FileTo_p_TagLib__File, 0, 0, 0, 0, 0},{"_p_TagLib__FLAC__File", _p_TagLib__FLAC__FileTo_p_TagLib__File, 0, 0, 0, 0, 0},{"_p_TagLib__File", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__FrameFactory[] = {{"_p_TagLib__ID3v2__FrameFactory", 0, "TagLib::ID3v2::FrameFactory *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__FrameFactory", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ListTTagLib__ID3v2__Frame_p_t[] = {{"_p_TagLib__ListTTagLib__ID3v2__Frame_p_t", 0, "TagLib::List<TagLib::ID3v2::Frame * > *|TagLib::ID3v2::FrameList *", 0, 0, 0, 0},{"_p_TagLib__ListTTagLib__ID3v2__Frame_p_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__basic_stringTTagLib__wchar_t__const_iterator[] = {{"_p_std__basic_stringTTagLib__wchar_t__const_iterator", 0, "std::basic_string<TagLib::wchar >::const_iterator *|TagLib::String::ConstIterator *", 0, 0, 0, 0},{"_p_std__basic_stringTTagLib__wchar_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_T[] = {{"_p_T", 0, "T *", 0, 0, 0, 0},{"_p_T", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__AudioProperties[] = {{"_p_TagLib__AudioProperties", 0, "TagLib::AudioProperties *|TagLib::Vorbis::AudioProperties *", 0, 0, 0, 0},{"_p_TagLib__AudioProperties", 0, 0, 0, 0, 0, 0},{"_p_TagLib__MPEG__Properties", _p_TagLib__MPEG__PropertiesTo_p_TagLib__AudioProperties, 0, 0, 0, 0, 0},{"_p_TagLib__Vorbis__Properties", _p_TagLib__Vorbis__PropertiesTo_p_TagLib__AudioProperties, 0, 0, 0, 0, 0},{"_p_TagLib__FLAC__Properties", _p_TagLib__FLAC__PropertiesTo_p_TagLib__AudioProperties, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__MPEG__Properties[] = {{"_p_TagLib__MPEG__Properties", 0, "TagLib::MPEG::Properties *", 0, 0, 0, 0},{"_p_TagLib__MPEG__Properties", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Vorbis__Properties[] = {{"_p_TagLib__Vorbis__Properties", 0, "TagLib::Vorbis::Properties *", 0, 0, 0, 0},{"_p_TagLib__Vorbis__Properties", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__FLAC__Properties[] = {{"_p_TagLib__FLAC__Properties", 0, "TagLib::FLAC::Properties *", 0, 0, 0, 0},{"_p_TagLib__FLAC__Properties", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__StringList[] = {{"_p_TagLib__StringList", 0, "TagLib::StringList *", 0, 0, 0, 0},{"_p_TagLib__StringList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__basic_stringTwchar_t_t[] = {{"_p_std__basic_stringTwchar_t_t", 0, "std::basic_string<wchar_t > *|TagLib::wstring *", 0, 0, 0, 0},{"_p_std__basic_stringTwchar_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__Tag[] = {{"_p_TagLib__ID3v2__Tag", 0, "TagLib::ID3v2::Tag *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__Tag", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ByteVector[] = {{"_p_TagLib__ByteVector", 0, "TagLib::ByteVector *", 0, 0, 0, 0},{"_p_TagLib__ByteVector", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Tag[] = {{"_p_TagLib__Tag", 0, "TagLib::Tag *", 0, 0, 0, 0},{"_p_TagLib__ID3v1__Tag", _p_TagLib__ID3v1__TagTo_p_TagLib__Tag, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__Tag", _p_TagLib__ID3v2__TagTo_p_TagLib__Tag, 0, 0, 0, 0, 0},{"_p_TagLib__Ogg__XiphComment", _p_TagLib__Ogg__XiphCommentTo_p_TagLib__Tag, 0, 0, 0, 0, 0},{"_p_TagLib__Tag", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__Frame[] = {{"_p_TagLib__ID3v2__Frame", 0, "TagLib::ID3v2::Frame *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__CommentsFrame", _p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__AttachedPictureFrame", _p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__Frame", 0, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__TextIdentificationFrame", _p_TagLib__ID3v2__TextIdentificationFrameTo_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__UserTextIdentificationFrame", _p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_TagLib__ID3v2__Frame[] = {{"_p_p_TagLib__ID3v2__Frame", 0, "TagLib::ID3v2::Frame **", 0, 0, 0, 0},{"_p_p_TagLib__ID3v2__CommentsFrame", _p_p_TagLib__ID3v2__CommentsFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_p_TagLib__ID3v2__AttachedPictureFrame", _p_p_TagLib__ID3v2__AttachedPictureFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_p_TagLib__ID3v2__Frame", 0, 0, 0, 0, 0, 0},{"_p_p_TagLib__ID3v2__TextIdentificationFrame", _p_p_TagLib__ID3v2__TextIdentificationFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{"_p_p_TagLib__ID3v2__UserTextIdentificationFrame", _p_p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__Footer[] = {{"_p_TagLib__ID3v2__Footer", 0, "TagLib::ID3v2::Footer *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__Footer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t[] = {{"_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t", 0, "TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > > *|TagLib::Map<TagLib::ByteVector,TagLib::ID3v2::FrameList > *", 0, 0, 0, 0},{"_p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__TextIdentificationFrame[] = {{"_p_TagLib__ID3v2__TextIdentificationFrame", 0, "TagLib::ID3v2::TextIdentificationFrame *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__TextIdentificationFrame", 0, 0, 0, 0, 0, 0},{"_p_TagLib__ID3v2__UserTextIdentificationFrame", _p_TagLib__ID3v2__UserTextIdentificationFrameTo_p_TagLib__ID3v2__TextIdentificationFrame, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__UserTextIdentificationFrame[] = {{"_p_TagLib__ID3v2__UserTextIdentificationFrame", 0, "TagLib::ID3v2::UserTextIdentificationFrame *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__UserTextIdentificationFrame", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__CommentsFrame[] = {{"_p_TagLib__ID3v2__CommentsFrame", 0, "TagLib::ID3v2::CommentsFrame *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__CommentsFrame", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__listTTagLib__String_t__const_iterator[] = {{"_p_std__listTTagLib__String_t__const_iterator", 0, "std::list<TagLib::String >::const_iterator *|TagLib::List<TagLib::String >::ConstIterator *", 0, 0, 0, 0},{"_p_std__listTTagLib__String_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__listTTagLib__String_t__iterator[] = {{"_p_std__listTTagLib__String_t__iterator", 0, "std::list<TagLib::String >::iterator *|TagLib::List<TagLib::String >::Iterator *", 0, 0, 0, 0},{"_p_std__listTTagLib__String_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__basic_stringTTagLib__wchar_t__iterator[] = {{"_p_std__basic_stringTTagLib__wchar_t__iterator", 0, "std::basic_string<TagLib::wchar >::iterator *|TagLib::String::Iterator *", 0, 0, 0, 0},{"_p_std__basic_stringTTagLib__wchar_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTchar_t__const_iterator[] = {{"_p_std__vectorTchar_t__const_iterator", 0, "std::vector<char >::const_iterator *|TagLib::ByteVector::ConstIterator *", 0, 0, 0, 0},{"_p_std__vectorTchar_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTchar_t__iterator[] = {{"_p_std__vectorTchar_t__iterator", 0, "std::vector<char >::iterator *|TagLib::ByteVector::Iterator *", 0, 0, 0, 0},{"_p_std__vectorTchar_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ConstIterator[] = {{"_p_ConstIterator", 0, "ConstIterator *", 0, 0, 0, 0},{"_p_ConstIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Iterator[] = {{"_p_Iterator", 0, "Iterator *", 0, 0, 0, 0},{"_p_Iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__listTTagLib__ID3v2__Frame_p_t__iterator[] = {{"_p_std__listTTagLib__ID3v2__Frame_p_t__iterator", 0, "std::list<TagLib::ID3v2::Frame * >::iterator *|TagLib::List<TagLib::ID3v2::Frame * >::Iterator *", 0, 0, 0, 0},{"_p_std__listTTagLib__ID3v2__Frame_p_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0, 0, 0, 0},{"_p_std__string", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_int[] = {{"_p_unsigned_int", 0, "unsigned int *|TagLib::uint *", 0, 0, 0, 0},{"_p_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v1__StringHandler[] = {{"_p_TagLib__ID3v1__StringHandler", 0, "TagLib::ID3v1::StringHandler *", 0, 0, 0, 0},{"_p_TagLib__ID3v1__StringHandler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Ogg__XiphComment[] = {{"_p_TagLib__Ogg__XiphComment", 0, "TagLib::Ogg::XiphComment *", 0, 0, 0, 0},{"_p_TagLib__Ogg__XiphComment", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__MapTTagLib__String_TagLib__StringList_t[] = {{"_p_TagLib__MapTTagLib__String_TagLib__StringList_t", 0, "TagLib::Map<TagLib::String,TagLib::StringList > *", 0, 0, 0, 0},{"_p_TagLib__MapTTagLib__String_TagLib__StringList_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__RefCounter[] = {{"_p_TagLib__RefCounter", 0, "TagLib::RefCounter *", 0, 0, 0, 0},{"_p_TagLib__RefCounter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *|TagLib::uchar *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator[] = {{"_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator", 0, "std::map<TagLib::String,TagLib::StringList >::const_iterator *|TagLib::Map<TagLib::String,TagLib::StringList >::ConstIterator *", 0, 0, 0, 0},{"_p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v1__Tag[] = {{"_p_TagLib__ID3v1__Tag", 0, "TagLib::ID3v1::Tag *", 0, 0, 0, 0},{"_p_TagLib__ID3v1__Tag", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__ExtendedHeader[] = {{"_p_TagLib__ID3v2__ExtendedHeader", 0, "TagLib::ID3v2::ExtendedHeader *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__ExtendedHeader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__String[] = {{"_p_TagLib__String", 0, "TagLib::String *", 0, 0, 0, 0},{"_p_TagLib__String", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__FileRef[] = {{"_p_TagLib__FileRef", 0, "TagLib::FileRef *", 0, 0, 0, 0},{"_p_TagLib__FileRef", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Ogg__File[] = {{"_p_TagLib__Ogg__File", 0, "TagLib::Ogg::File *", 0, 0, 0, 0},{"_p_TagLib__Ogg__File", 0, 0, 0, 0, 0, 0},{"_p_TagLib__Vorbis__File", _p_TagLib__Vorbis__FileTo_p_TagLib__Ogg__File, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__MPEG__File[] = {{"_p_TagLib__MPEG__File", 0, "TagLib::MPEG::File *", 0, 0, 0, 0},{"_p_TagLib__MPEG__File", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__Vorbis__File[] = {{"_p_TagLib__Vorbis__File", 0, "TagLib::Vorbis::File *", 0, 0, 0, 0},{"_p_TagLib__Vorbis__File", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__FLAC__File[] = {{"_p_TagLib__FLAC__File", 0, "TagLib::FLAC::File *", 0, 0, 0, 0},{"_p_TagLib__FLAC__File", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ID3v2__AttachedPictureFrame[] = {{"_p_TagLib__ID3v2__AttachedPictureFrame", 0, "TagLib::ID3v2::AttachedPictureFrame *", 0, 0, 0, 0},{"_p_TagLib__ID3v2__AttachedPictureFrame", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTTagLib__String_TagLib__StringList_t__iterator[] = {{"_p_std__mapTTagLib__String_TagLib__StringList_t__iterator", 0, "std::map<TagLib::String,TagLib::StringList >::iterator *|TagLib::Map<TagLib::String,TagLib::StringList >::Iterator *", 0, 0, 0, 0},{"_p_std__mapTTagLib__String_TagLib__StringList_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ByteVectorList[] = {{"_p_ByteVectorList", 0, "ByteVectorList *", 0, 0, 0, 0},{"_p_ByteVectorList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator[] = {{"_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator", 0, "std::map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::iterator *|TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::Iterator *", 0, 0, 0, 0},{"_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator[] = {{"_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator", 0, "std::map<TagLib::ByteVector,TagLib::ID3v2::FrameList >::const_iterator *|TagLib::Map<TagLib::ByteVector,TagLib::List<TagLib::ID3v2::Frame * > >::ConstIterator *", 0, 0, 0, 0},{"_p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__APE__Tag[] = {{"_p_TagLib__APE__Tag", 0, "TagLib::APE::Tag *", 0, 0, 0, 0},{"_p_TagLib__APE__Tag", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TagLib__ListTTagLib__String_t[] = {{"_p_TagLib__ListTTagLib__String_t", 0, "TagLib::List<TagLib::String > *", 0, 0, 0, 0},{"_p_TagLib__StringList", _p_TagLib__StringListTo_p_TagLib__ListTTagLib__String_t, 0, 0, 0, 0, 0},{"_p_TagLib__ListTTagLib__String_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *|TagLib::ulong *", 0, 0, 0, 0},{"_p_unsigned_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator[] = {{"_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator", 0, "std::list<TagLib::ID3v2::Frame * >::const_iterator *|TagLib::List<TagLib::ID3v2::Frame * >::ConstIterator *", 0, 0, 0, 0},{"_p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Key, 
_swigt__p_wchar_t, 
_swigt__p_TagLib__ID3v2__Header, 
_swigt__p_TagLib__Ogg__PageHeader, 
_swigt__p_TagLib__File, 
_swigt__p_TagLib__ID3v2__FrameFactory, 
_swigt__p_TagLib__ListTTagLib__ID3v2__Frame_p_t, 
_swigt__p_std__basic_stringTTagLib__wchar_t__const_iterator, 
_swigt__p_char, 
_swigt__p_T, 
_swigt__p_TagLib__AudioProperties, 
_swigt__p_TagLib__MPEG__Properties, 
_swigt__p_TagLib__Vorbis__Properties, 
_swigt__p_TagLib__FLAC__Properties, 
_swigt__p_TagLib__StringList, 
_swigt__p_std__basic_stringTwchar_t_t, 
_swigt__p_TagLib__ID3v2__Tag, 
_swigt__p_TagLib__ByteVector, 
_swigt__p_TagLib__Tag, 
_swigt__p_TagLib__ID3v2__Frame, 
_swigt__size_t, 
_swigt__std__size_t, 
_swigt__p_p_TagLib__ID3v2__Frame, 
_swigt__p_TagLib__ID3v2__Footer, 
_swigt__p_TagLib__MapTTagLib__ByteVector_TagLib__ListTTagLib__ID3v2__Frame_p_t_t, 
_swigt__p_TagLib__ID3v2__TextIdentificationFrame, 
_swigt__p_TagLib__ID3v2__UserTextIdentificationFrame, 
_swigt__p_TagLib__ID3v2__CommentsFrame, 
_swigt__p_std__listTTagLib__String_t__const_iterator, 
_swigt__p_std__listTTagLib__String_t__iterator, 
_swigt__p_std__basic_stringTTagLib__wchar_t__iterator, 
_swigt__p_std__vectorTchar_t__const_iterator, 
_swigt__p_std__vectorTchar_t__iterator, 
_swigt__p_ConstIterator, 
_swigt__p_Iterator, 
_swigt__p_std__listTTagLib__ID3v2__Frame_p_t__iterator, 
_swigt__p_std__string, 
_swigt__p_unsigned_int, 
_swigt__p_TagLib__ID3v1__StringHandler, 
_swigt__p_TagLib__Ogg__XiphComment, 
_swigt__p_TagLib__MapTTagLib__String_TagLib__StringList_t, 
_swigt__p_TagLib__RefCounter, 
_swigt__p_unsigned_char, 
_swigt__p_std__mapTTagLib__String_TagLib__StringList_t__const_iterator, 
_swigt__p_TagLib__ID3v1__Tag, 
_swigt__p_TagLib__ID3v2__ExtendedHeader, 
_swigt__ptrdiff_t, 
_swigt__std__ptrdiff_t, 
_swigt__p_TagLib__String, 
_swigt__p_TagLib__FileRef, 
_swigt__p_TagLib__Ogg__File, 
_swigt__p_TagLib__MPEG__File, 
_swigt__p_TagLib__Vorbis__File, 
_swigt__p_TagLib__FLAC__File, 
_swigt__p_TagLib__ID3v2__AttachedPictureFrame, 
_swigt__p_std__mapTTagLib__String_TagLib__StringList_t__iterator, 
_swigt__p_ByteVectorList, 
_swigt__p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__iterator, 
_swigt__p_std__mapTTagLib__ByteVector_TagLib__ID3v2__FrameList_t__const_iterator, 
_swigt__p_TagLib__APE__Tag, 
_swigt__p_TagLib__ListTTagLib__String_t, 
_swigt__p_unsigned_long, 
_swigt__p_std__listTTagLib__ID3v2__Frame_p_t__const_iterator, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"TAGLIB_MAJOR_VERSION", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"TAGLIB_MINOR_VERSION", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"TAGLIB_PATCH_VERSION", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"AudioProperties_Fast", SWIG_From_int((int)(TagLib::AudioProperties::Fast))); 
    }
    {
        PyDict_SetItemString(d,"AudioProperties_Average", SWIG_From_int((int)(TagLib::AudioProperties::Average))); 
    }
    {
        PyDict_SetItemString(d,"AudioProperties_Accurate", SWIG_From_int((int)(TagLib::AudioProperties::Accurate))); 
    }
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"ByteVector_null",_wrap_ByteVector_null_get, _wrap_ByteVector_null_set);
    {
        PyDict_SetItemString(d,"String_Latin1", SWIG_From_int((int)(TagLib::String::Latin1))); 
    }
    {
        PyDict_SetItemString(d,"String_UTF16", SWIG_From_int((int)(TagLib::String::UTF16))); 
    }
    {
        PyDict_SetItemString(d,"String_UTF16BE", SWIG_From_int((int)(TagLib::String::UTF16BE))); 
    }
    {
        PyDict_SetItemString(d,"String_UTF8", SWIG_From_int((int)(TagLib::String::UTF8))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"String_null",_wrap_String_null_get, _wrap_String_null_set);
    {
        PyDict_SetItemString(d,"MPEGFile_NoTags", SWIG_From_int((int)(TagLib::MPEG::File::NoTags))); 
    }
    {
        PyDict_SetItemString(d,"MPEGFile_ID3v1", SWIG_From_int((int)(TagLib::MPEG::File::ID3v1))); 
    }
    {
        PyDict_SetItemString(d,"MPEGFile_ID3v2", SWIG_From_int((int)(TagLib::MPEG::File::ID3v2))); 
    }
    {
        PyDict_SetItemString(d,"MPEGFile_APE", SWIG_From_int((int)(TagLib::MPEG::File::APE))); 
    }
    {
        PyDict_SetItemString(d,"MPEGFile_AllTags", SWIG_From_int((int)(TagLib::MPEG::File::AllTags))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Other", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Other))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_FileIcon", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::FileIcon))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_OtherFileIcon", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::OtherFileIcon))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_FrontCover", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::FrontCover))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_BackCover", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::BackCover))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_LeafletPage", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::LeafletPage))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Media", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Media))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_LeadArtist", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::LeadArtist))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Artist", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Artist))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Conductor", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Conductor))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Band", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Band))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Composer", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Composer))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Lyricist", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Lyricist))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_RecordingLocation", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::RecordingLocation))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_DuringRecording", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::DuringRecording))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_DuringPerformance", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::DuringPerformance))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_MovieScreenCapture", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::MovieScreenCapture))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_ColouredFish", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::ColouredFish))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_Illustration", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::Illustration))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_BandLogo", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::BandLogo))); 
    }
    {
        PyDict_SetItemString(d,"AttachedPictureFrame_PublisherLogo", SWIG_From_int((int)(TagLib::ID3v2::AttachedPictureFrame::PublisherLogo))); 
    }
}

